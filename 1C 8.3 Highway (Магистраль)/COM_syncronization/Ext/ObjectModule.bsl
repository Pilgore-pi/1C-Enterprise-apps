
   //////////////////////////////////////////
  //////////////////////////////////////////
 //// 
//////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Перечисления

// Строковое перечисление ТипОбъекта
Функция ТипОбъектаСправочник()                  экспорт возврат "СправочникСсылка";   конецФункции
Функция ТипОбъектаДокумент()                    экспорт возврат "ДокументСсылка";     конецФункции
Функция ТипОбъектаПеречисление()                экспорт возврат "ПеречислениеСсылка"; конецФункции
Функция ТипОбъектаПланСчетов()                  экспорт возврат "ПланСчетовСсылка";   конецФункции

// Числовое перечисление ОбработкаОдинаковых
Функция ОбработкаОдиноковыхНовыйИдентификатор() экспорт возврат 0; конецФункции
Функция ОбработкаОдиноковыхПропускать()         экспорт возврат 1; конецФункции
Функция ОбработкаОдиноковыхЗаменять()           экспорт возврат 2; конецФункции
Функция ОбработкаОдиноковыхВыводитьОшибку()     экспорт возврат 3; конецФункции

// Числовое перечисление ТехнологияОбменаДанными
Функция ТехнологияCOM()                         экспорт возврат 0; конецФункции
Функция ТехнологияXBase()                       экспорт возврат 1; конецФункции
Функция ТехнологияHTTP()                        экспорт возврат 2; конецФункции

// Числовое перечисление ОтображениеПоля
Функция ОтображениеПростое()                    экспорт возврат 0; конецФункции
Функция ОтображениеПоКоду()                     экспорт возврат 1; конецФункции
Функция ОтображениеПоНомеру()                   экспорт возврат 2; конецФункции
Функция ОтображениеПоНаименованию()             экспорт возврат 3; конецФункции
Функция ОтображениеПоРеквизиту()                экспорт возврат 4; конецФункции
Функция ОтображениеКодаНЗвЗаказКлиента()        экспорт возврат 5; конецФункции

// Числовое перечисление ТипБазы
Функция ТипБазыФайловая()                       экспорт возврат 0; КонецФункции
Функция ТипБазыСерверная()                      экспорт возврат 1; КонецФункции

#КонецОбласти

Функция СоздатьПодключение(строкаПодключения = "") экспорт
	
	успех = ЗначениеЗаполнено(Логин) и ЗначениеЗаполнено(КлючЗаписиИсточника);
	
	Если ТипБазы = ТипБазыФайловая() Тогда
		успех = успех и ЗначениеЗаполнено(ПутьКФайловойБазе);
	Иначе
		успех = успех и ЗначениеЗаполнено(ИмяСервера)
				      и ЗначениеЗаполнено(ИмяБД);
	КонецЕсли;
	
	Если не успех Тогда
		
		ЛогиЗаписатьСтроку("Заполнены не все обязательные реквизиты");
		Возврат неопределено;
		
	КонецЕсли;
	
	попытка
		
		connector = new ComObject("V83.ComConnector");
		
		Если НЕ ЗначениеЗаполнено(строкаПодключения) Тогда
			строкаПодключения = NewCOMConnectionString(
				ТипБазы,
				Логин,
				Пароль,
				ПутьКФайловойБазе,
				ИмяСервера,
				ИмяБД
			);
		КонецЕсли;
		
		Подключение = connector.Connect(строкаПодключения);
		
	исключение
		
		ЛогиЗаписатьСтроку("Ошибка при создании COM-соединения!"
			+ Символы.ПС + ОписаниеОшибки());
		
	конецПопытки;
	
	Возврат Подключение;
	
КонецФункции

Функция ОбъектМетаданныхСуществует(типОбъекта)
	
	типОбъектаКопия = ?(
		ТипЗнч(типОбъекта) = Тип("Строка"),
		Тип(типОбъекта),
		типОбъекта
	);
	
	НайденоВОсновнойКонфигурации = Метаданные.НайтиПоТипу(типОбъектаКопия) <> неопределено;
	
	Если НЕ НайденоВОсновнойКонфигурации Тогда
		
		Для каждого расш из МетаданныеАктивныхРасширений() Цикл
			
			ссылка = расш.НайтиПоТипу(типОбъекта);
			Если ссылка <> неопределено тогда возврат истина; КонецЕсли;
			
		КонецЦикла;
		
		возврат ложь;
		
	КонецЕсли;
	
	Возврат истина;
	
КонецФункции

Функция КакУникальныйКод(ТипОбъекта, имяОбъекта, знач код) экспорт
	
	ссылка = Справочники.Клиенты.НайтиПоПолномуИмени(код);
	Если ссылка = неопределено тогда
		Возврат код;
	КонецЕсли;
	
	этоСправочник = ТипОбъекта = ТипОбъектаСправочник();
	
	ИД_имя          = ?(этоСправочник, "Код", "Номер");
	ОбщийОбъект_имя = ?(этоСправочник, "Справочник", "Документ");
	длинаКода = стрДлина(код);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОбъектМетаданных."+ ИД_имя +") КАК Код
	|ИЗ
	|	"+ ОбщийОбъект_имя +"."+ имяОбъекта +" КАК ОбъектМетаданных";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		код = Формат(Число(выборка.Код) + 1, "ЧЦ=" + длинаКода + "; ЧВН=; ЧГ=0");
	КонецЦикла;
	
	Возврат код;
	
КонецФункции

Функция ТЧ_Как_Соответствие()
	
	словарь = новый Соответствие;
	
	Для каждого строка из СопоставляемыеРеквизиты Цикл
		
		отображениеВЗначение = новый Структура(
			"ИмяРеквизитаВУдаленнойБазе, Операция, ТипДанных",
			строка.ИмяРеквизитаВУдаленнойБазе,
			строка.ОтображениеДанных,
			строка.ПреобразоватьКТипу
		);
		
		ключ = ?(
			ЗначениеЗаполнено(строка.ИмяРеквизитаВЭтойБазе),
			строка.ИмяРеквизитаВЭтойБазе,
			"null_" + СлучайнаяСтрока(20)
		);
		
		словарь.Вставить(
			ключ,
			новый фиксированнаяСтруктура(отображениеВЗначение)
		);
		
	КонецЦикла;
	
	Возврат словарь;
	
КонецФункции
Функция ТЧ_в_строку(таблица, отображатьИД1С = ложь)
	
	текстовоеПредставление = "";
	
	отобрИмя = ?(отображатьИД1С, "Имя", "Заголовок");
	Если таблица.Колонки.Количество() > 0 И таблица.Количество() > 0 Тогда
		
		текстовоеПредставление = "";
		линия = "";
		всегоКолонок = таблица.Колонки.Количество();
		
		// Вывод заголовков
		Для каждого колонка из таблица.Колонки Цикл
			текстовоеПредставление = текстовоеПредставление + колонка[отобрИмя] + " | ";
		КонецЦикла;
		
		Для индекс = 0 по СтрДлина(текстовоеПредставление) Цикл
			линия = линия + "-";
		КонецЦикла;
		
		текстовоеПредставление = текстовоеПредставление + Символы.ПС + линия + Символы.ПС;
		
		// Вывод строк
		Для каждого строка из таблица Цикл
			текстСтроки = "";
			Для каждого поле из строка Цикл
				текстСтроки = текстСтроки + Строка(поле) + " | ";
			КонецЦикла;
			
			текстовоеПредставление = текстовоеПредставление + текстСтроки + Символы.ПС;
			
		КонецЦикла;
		
		// Завершение вывода
		текстовоеПредставление = текстовоеПредставление + линия + символы.ПС;
		
	КонецЕсли;
	
	Возврат текстовоеПредставление;
	
КонецФункции
Функция ТЧ_Строка_в_строку(строкаТЗ)
	Если строкаТЗ = неопределено Тогда
		возврат "";
	КонецЕсли;
	
	текстСтроки = "| ";
	Для каждого поле из строкаТЗ Цикл
		текстСтроки = текстСтроки + Строка(поле) + " | ";
	КонецЦикла;
	
	Возврат текстСтроки + Символы.ПС;
	
КонецФункции

Процедура ЗагрузитьВОбъект(
		знач ТипОбъекта,
		КлючЗаписиИсточника,
		текстОшибки = "",
		подкл = неопределено
	) экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		инфоТипов = СтрРазделить(типОбъекта, ".", ложь);
		имяОбъекта = инфоТипов[1];
		
		описаниеСтроки = новый ОписаниеТипов(
			"Строка", ,
			новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная)
		);
		логиТЗ = новый ТаблицаЗначений;
		логиТЗ.Колонки.Добавить("Ключ",     описаниеСтроки, "Параметр");
		логиТЗ.Колонки.Добавить("Значение", описаниеСтроки, "Значение");
		
		////////////////////////////////////////////
		доЗапроса = 0;
		Запрос = Новый Запрос;
		Запрос.Текст = "выбрать количество(*) как Кол из "+ ИмяОбщегоТипаВЗапросе(инфоТипов[0]) +"."+ имяОбъекта;
		Выборка = Запрос.Выполнить().Выбрать();
		выборка.Следующий();
		доЗапроса = выборка.Кол;
		
		запись = логиТЗ.Добавить();
		запись.Ключ = "Записей в объекте этой базы до загрузки"; запись.Значение = Формат(доЗапроса, "ЧН=0; ЧГ=0");
		ЛогиЗаписатьСтроку(ТЧ_Строка_в_строку(запись));
		////////////////////////////////////////////
		
		Если подкл = неопределено тогда
			ПутьКФайловойБазе = СокрЛП(ПутьКФайловойБазе);
			Логин             = СокрЛП(Логин);
			ИмяБД             = СокрЛП(ИмяБД);
			ИмяСервера        = СокрЛП(ИмяСервера);
			Подключение       = СоздатьПодключение();
			Сопоставление     = ТЧ_Как_Соответствие();
			Если Подключение <> неопределено тогда
				СообщитьПользователю("COM-соединение успешно");
			КонецЕсли;
		Иначе
			Подключение       = подкл;
			Сопоставление     = ТЧ_Как_Соответствие();
		КонецЕсли;
		
		идентификаторЭтойЗаписи = "";
		
		удаленныйЗапрос       = Подключение.NewObject("Запрос");
		удаленныйЗапрос.Текст = ТекстЗапроса;
		РезультатЗапроса      = удаленныйЗапрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			текстОшибки = "Не найдено ни одной записи в удаленной базе";
			возврат;
		КонецЕсли;
		
		данные = РезультатЗапроса.Выбрать();
		
		присвоеноНовыхКодов = 0;
		замен               = 0;
		пропущено           = 0;
		обработаноЗаписей   = 0;
		Пока Данные.Следующий() Цикл
			обработаноЗаписей = обработаноЗаписей + 1;
			
			// Логика создания новой записи в ИБ
			Если инфоТипов[0] = ТипОбъектаСправочник() Тогда
				попытка
					новыйЭлемент = Справочники[ИмяОбъекта].СоздатьЭлемент();
					идентификаторЭтойЗаписи = "Код";
					элемент = Справочники[имяОбъекта].НайтиПоКоду(данные[КлючЗаписиИсточника]);
					элементНайден = элемент <> неопределено и элемент <> Справочники[имяОбъекта].ПустаяСсылка();
				Исключение
					текстОшибки = "Справочник """+ ИмяОбъекта +""" не найден в базе данных";
					возврат;
				КонецПопытки;
			Иначе
				попытка
					новыйЭлемент = Документы[ИмяОбъекта].СоздатьДокумент();
					идентификаторЭтойЗаписи = "Номер";
					элемент = Документы[имяОбъекта].НайтиПоНомеру(данные[КлючЗаписиИсточника]);
					элементНайден = элемент <> неопределено и элемент <> Документы[имяОбъекта].ПустаяСсылка();
				исключение
					текстОшибки = "Документ """+ ИмяОбъекта +""" не найден в базе данных";
					запись = логиТЗ.Добавить();
					запись.Ключ = "Исключение"; запись.Значение = текстОшибки;
					ЛогиЗаписать(ТЧ_Строка_в_строку(запись));
					возврат;
				конецПопытки;
			КонецЕсли;
			
			// Логика разрешения конфликтов одинаковых идентификаторов из обеих баз
			Если элементНайден Тогда
				
				Если РежимОбработкиОдинаковых = ОбработкаОдиноковыхВыводитьОшибку() Тогда
					текстОшибки = "Найдены объекты с одинаковыми идентификаторами номер записи = " + обработаноЗаписей;
					запись = логиТЗ.Добавить();
					запись.Ключ = "Исключение"; запись.Значение = текстОшибки;
					ЛогиЗаписать(ТЧ_Строка_в_строку(запись));
					ВызватьИсключение текстОшибки;
				ИначеЕсли РежимОбработкиОдинаковых = ОбработкаОдиноковыхПропускать() Тогда
					пропущено = пропущено + 1;
					продолжить;
				ИначеЕсли РежимОбработкиОдинаковых = ОбработкаОдиноковыхЗаменять() Тогда
					элемент.Ссылка.ПолучитьОбъект().Удалить();
					замен = замен + 1;
				ИначеЕсли РежимОбработкиОдинаковых = ОбработкаОдиноковыхНовыйИдентификатор() Тогда
					новыйЭлемент[идентификаторЭтойЗаписи] = КакУникальныйКод(ТипОбъекта, ИмяОбъекта, данные[КлючЗаписиИсточника]);
					присвоеноНовыхКодов = присвоеноНовыхКодов + 1;
				КонецЕсли;
				
			Иначе
				
				новыйЭлемент[идентификаторЭтойЗаписи] = данные[КлючЗаписиИсточника];
				
			КонецЕсли;
			
			записывать = Истина;
			Для каждого пара из сопоставление Цикл
				
				Если СтрНачинаетсяС(пара.Ключ, "null") Тогда
					// x => action(x)
					Действие(
						данные[пара.Значение.ИмяРеквизитаВУдаленнойБазе],
						пара.Значение.Операция
					);
					записывать = ложь;
					продолжить;
				КонецЕсли;
				
				// (x, type) => func(x, type)
				новыйЭлемент[пара.Ключ] = Маппер(
					данные[пара.Значение.ИмяРеквизитаВУдаленнойБазе],
					пара.Значение.ТипДанных,
					пара.Значение.Операция
				);
				
			КонецЦикла;
			
			Если записывать тогда новыйЭлемент.Записать(); КонецЕсли;
			
		КонецЦикла;
		
		запись = логиТЗ.Добавить();
		запись.Ключ = "Статус"; запись.Значение = "Обмен данными успешно завершен. Транзакция зафиксирована.";
		ЛогиЗаписать(ТЧ_Строка_в_строку(запись));
		
		запись = логиТЗ.Добавить();
		запись.Ключ = "Обработано записей"; запись.Значение = обработаноЗаписей;
		ЛогиЗаписать(ТЧ_Строка_в_строку(запись));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "выбрать количество(*) как Кол из "+ ИмяОбщегоТипаВЗапросе(инфоТипов[0]) +"."+ имяОбъекта;
		Выборка = Запрос.Выполнить().Выбрать();
		выборка.Следующий();
		послеЗапроса = выборка.Кол;
		
		запись = логиТЗ.Добавить();
			запись.Ключ = "Записей в объекте этой базы до загрузки";
			запись.Значение = Формат(доЗапроса, "ЧН=0; ЧГ=0") + " + " + Формат(послеЗапроса - доЗапроса, "ЧН=0; ЧГ=0") + " = " + Формат(послеЗапроса, "ЧН=0; ЧГ=0");
		ЛогиЗаписать(ТЧ_Строка_в_строку(запись));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		запись = логиТЗ.Добавить();
			запись.Ключ = "Статус";
			запись.Значение = "Откат транзакции, отмена изменений";
		ЛогиЗаписать(ТЧ_Строка_в_строку(запись));
		
		запись = логиТЗ.Добавить();
			запись.Ключ = "Исключение";
			запись.Значение = ОписаниеОшибки();
		
		ЛогиЗаписать(ТЧ_Строка_в_строку(запись));
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторЕдИзм(текстОшибки = "", подключение = неопределено) Экспорт
	
	Попытка
		
		//типХранилищаЕдИзм = ТипОбъектаСправочник() + ".УпаковкиЕдиницИзмерения";
		типХранилищаЕдИзм = ТипОбъектаСправочник() + ".КлассификаторЕдиницИзмерения";
		
		Если НЕ ОбъектМетаданныхСуществует(типХранилищаЕдИзм) Тогда
			текстОшибки = "Невозможно совершить обмен данными, так как справочника <"+ типХранилищаЕдИзм +"> не существует в текущей ИБ";
			ЛогиЗаписатьСтроку("Ошибка | " + текстОшибки);
			возврат;
		КонецЕсли;
		
		ТекстЗапроса = ПолучитьМакет("ЗапросКлассификаторЕдИзм").ПолучитьТекст();
		
		СопоставляемыеРеквизиты.Очистить();
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе      = "Наименование";
			элемент.ИмяРеквизитаВУдаленнойБазе = "Наименование";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе      = "НаименованиеПолное";
			элемент.ИмяРеквизитаВУдаленнойБазе = "НаименованиеПолное";
		
		РежимОбработкиОдинаковых = ОбработкаОдиноковыхПропускать();
		ЗагрузитьВОбъект(типХранилищаЕдИзм, "Код", текстОшибки, подключение);
		
	Исключение
		
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// [1C:БП] спр. НоменклатурныеГруппы --> [1C:ERP] док. ЗаказКлиента, спр. Назначения
Процедура ЗагрузитьНоменклатурныеГруппы(текстОшибки = "", подключение = неопределено) экспорт
	
	типОбъекта = ТипОбъектаДокумент() + ".ЗаказКлиента";
	
	Если НЕ ОбъектМетаданныхСуществует(типОбъекта) Тогда
		текстОшибки = "Невозможно совершить обмен данными, так как объекта <"+ типОбъекта +"> не существует в текущей ИБ";
		ЛогиЗаписатьСтроку("Ошибка | " + текстОшибки);
		возврат;
	КонецЕсли;
	
	Попытка
		
		ТекстЗапроса = ПолучитьМакет("ЗапросНоменклатурныеГруппы").ПолучитьТекст();
		
		СопоставляемыеРеквизиты.Очистить();
		стр = СопоставляемыеРеквизиты.Добавить();
			стр.ИмяРеквизитаВЭтойБазе = "";
			стр.ИмяРеквизитаВУдаленнойБазе = "Код";
			стр.ОтображениеДанных = ОтображениеКодаНЗвЗаказКлиента();
		
		РежимОбработкиОдинаковых = ОбработкаОдиноковыхПропускать();
		ЛогиЗаписатьСтроку("Начало загрузки <"+ типОбъекта +">");
		
		ЗагрузитьВОбъект(типОбъекта, "Код", текстОшибки, подключение);
		
		Если ЗначениеЗаполнено(текстОшибки) Тогда
			ЛогиЗаписатьСтроку("Ошибка | " + текстОшибки);
			Возврат;
		КонецЕсли;
		
	Исключение
		
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьОстаткиЦС_вСправочник(текстОшибки = "", подключение = неопределено) Экспорт
	
	Попытка
		
		//ТипОбъекта = "СправочникСсылка.ВыборкаОстатков";
		ТипОбъекта = "СправочникСсылка.ВыборкаОстатковПоНЗ";
		ТипКлассификатора = ТипОбъектаСправочник() + ".КлассификаторЕдиницИзмерения";
		#Область Вариант_ОстаткиНаЦС
		 
		//ТекстЗапроса = ПолучитьМакет("ЗапросОстаткиНаЦС").ПолучитьТекст();
		//
		//СопоставляемыеРеквизиты.Очистить();
		//
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "Наименование";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "НаименованиеНоменклатуры";
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "НаимМатериалаПолное";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "НаимНоменклатурыПолное";
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "КодПодразделения";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "СкладКод";
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "НаимПодразделения";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "СкладНаименование";
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "ГОСТ";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "ГОСТ";
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "Количество";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "Остаток";
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "КоличествоРезерв";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "Резерв";
		//
		//элемент = СопоставляемыеРеквизиты.Добавить();
		//	элемент.ИмяРеквизитаВЭтойБазе = "ЕдиницаИзмерения";
		//	элемент.ИмяРеквизитаВУдаленнойБазе = "КодЕдиницыИзмерения";
		//	элемент.ОперацияРеквизитов = ОтображениеПоКоду();
		//
		//ИмяИдентификатораЗаписи = "НоменклатураКод";
		 
		#КонецОбласти
		
		
		#Область Вариант_ОстаткиНаЦС_ПоНарядЗаказам
		
		ТекстЗапроса = ПолучитьМакет("ЗапросОстаткиНаЦСпоНЗ").ПолучитьТекст();
		
		СопоставляемыеРеквизиты.Очистить();
		
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "Наименование";
			элемент.ИмяРеквизитаВУдаленнойБазе = "НоменклатураНаименование";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "НарядЗаказКод";
			элемент.ИмяРеквизитаВУдаленнойБазе = "НарядЗаказКод";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "НарядЗаказНаим";
			элемент.ИмяРеквизитаВУдаленнойБазе = "НарядЗаказНаименование";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "КодПодразделения";
			элемент.ИмяРеквизитаВУдаленнойБазе = "СкладКод";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "НаимПодразделения";
			элемент.ИмяРеквизитаВУдаленнойБазе = "СкладНаименование";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "ГОСТ";
			элемент.ИмяРеквизитаВУдаленнойБазе = "ГОСТ";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "Количество";
			элемент.ИмяРеквизитаВУдаленнойБазе = "Остаток";
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "КоличествоРезерв";
			элемент.ИмяРеквизитаВУдаленнойБазе = "Резерв";
		
		элемент = СопоставляемыеРеквизиты.Добавить();
			элемент.ИмяРеквизитаВЭтойБазе = "ЕдиницаИзмерения";
			элемент.ИмяРеквизитаВУдаленнойБазе = "ЕдиницаИзмеренияКод";
			элемент.ПреобразоватьКТипу = ТипКлассификатора;
			элемент.ОтображениеДанных = ОтображениеПоКоду();
		
		КлючЗаписиИсточника = "НоменклатураКод";
		
		#КонецОбласти
		
		ЗагрузитьВОбъект(
			ТипОбъекта,
			КлючЗаписиИсточника,
			текстОшибки,
			подключение
		);
		
	Исключение
		
		текстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ЗагрузитьОстаткиЦСВРегистр(текстОшибки = "") Экспорт
	
	текстОшибки = "Метод СинхронизироватьОстаткиЦС еще не реализован";
	возврат;
	
	
	
	//Документы.ВводОстатков.СоздатьДокумент().Записать(РежимЗаписиДокумента.Проведение);
	
	
	
	//Движение = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	//Движение.Отбор.Регистратор.Установить(Выборка.Ссылка); //Ввод начальных остатков
	//дебет = Движение.ДобавитьДебет();
	//Движение.Прочитать();
	//дебет.Регистратор = Выборка.Ссылка;
	//дебет.Период = Выборка.Дата;
	//дебет.Организация = ЭтаФорма.ЭлементыФормы.Организация.Значение;
	//дебет.Содержание = Выборка.Представление;
	//дебет.СубконтоДт.Номенклатура = Выборка.Номенклатура;
	//дебет.СубконтоДт.Контрагенты = Выборка.Контрагент;
	//дебет.СчетДт = СчетТара;
	//дебет.КоличествоДт = Выборка.Количество;
	
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Функция Маппер(объект, имяТипаПреобразования = "", Операция = 0)
	
	инфоТипов = СтрРазделить(имяТипаПреобразования, ".", Ложь);
	типУказан =
		ЗначениеЗаполнено(СокрЛП(имяТипаПреобразования))
		И ВРег(имяТипаПреобразования) <> "ПО УМОЛЧАНИЮ"
		И ВРег(имяТипаПреобразования) <> "ПОЛЕ"
		И ВРег(имяТипаПреобразования) <> "БЕЗ ИЗМЕНЕНИЙ";
	
	Если Операция = ОтображениеПростое() Тогда возврат объект; КонецЕсли;
	
	Если типУказан И (
			Операция = ОтображениеПоКоду()
			ИЛИ Операция = ОтображениеПоНомеру()) Тогда
		
		Если инфоТипов[0] = ТипОбъектаСправочник()
		Тогда возврат Справочники[инфоТипов[1]].НайтиПоКоду(Объект); КонецЕсли;
		
		Если инфоТипов[0] = ТипОбъектаДокумент()
		Тогда возврат Документы[инфоТипов[1]].НайтиПоНомеру(Объект); КонецЕсли;
		
	Возврат неопределено; КонецЕсли;
	
	Если типУказан И Операция = ОтображениеПоНаименованию() Тогда
		
		Если инфоТипов[0] = ТипОбъектаСправочник() Тогда
			возврат Справочники[инфоТипов[1]].НайтиПоНаименованию(Объект);
		КонецЕсли;
		
	Возврат неопределено; КонецЕсли;
	
	Если Операция = ОтображениеПоРеквизиту() Тогда возврат неопределено; КонецЕсли;
	
	Если Операция = ОтображениеКодаНЗвЗаказКлиента() Тогда возврат КодНЗвОбъектыERP(Объект); КонецЕсли;
	
	ВызватьИсключение "Неправильные аргументы функции";
	
КонецФункции

Функция КодНЗвОбъектыERP(код)
	
	Если не ЗначениеЗаполнено(код) Тогда возврат неопределено; КонецЕсли;
	
	имяДок = "ЗаказКлиента";
	имяСпр = "Назначения";
	
	результат = новый Структура(имяДок +","+ имяСпр);
	
	НачатьТранзакцию();
	
	Попытка
		
		новыйДок = Документы[имяДок].СоздатьДокумент();
		новыйДок.Номер = код;
		новыйДок.Дата = ТекущаяДата();
		новыйДок.Записать(РежимЗаписиДокумента.Запись);
		
		новыйСпр = Справочники[имяСпр].СоздатьЭлемент();
		новыйСпр.Заказ = новыйДок.Ссылка;
		новыйСпр.Записать();
		
		результат.Вставить(имяДок, новыйДок);
		результат.Вставить(имяСпр, новыйСпр);
		
		ЗафиксироватьТранзакцию();
		
		Возврат новый ФиксированнаяСтруктура(результат);
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	Возврат неопределено;
	
КонецФункции

// ? заменить операцию на ссылку на функцию по имени
Процедура Действие(Объект, Операция = 0)
	
	Попытка Маппер(Объект, , Операция);
	Исключение возврат; КонецПопытки;
	
КонецПроцедуры

Функция МетаданныеАктивныхРасширений() Экспорт
	
	МассивРасширений = РасширенияКонфигурации.Получить();
	МассивМетаданныхРасширений = новый Массив;
	Для каждого Расширение из МассивРасширений Цикл
		
		Если НЕ расширение.Активно Тогда продолжить; КонецЕсли;
		МассивМетаданныхРасширений.Добавить(
			новый ОбъектМетаданныхКонфигурация(Расширение.ПолучитьДанные())
		);
		
	КонецЦикла;
	
	Возврат МассивМетаданныхРасширений;
	
КонецФункции

Функция СлучайнаяСтрока(ДлинаСтроки)
	
	симв = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Результат = "";
	ГСЧ = новый ГенераторСлучайныхЧисел();
	Для Индекс = 1 По ДлинаСтроки Цикл
		Позиция = ГСЧ.СлучайноеЧисло(1, СтрДлина(Симв));
		Результат = Результат + Сред(Симв, Позиция, 1);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяОбщегоТипаВЗапросе(имяОбщегоТипа)
	
	индекс = СтрНайти(имяОбщегоТипа, "Ссылка",,СтрДлина(имяОбщегоТипа)-6);
	Если индекс = 0 Тогда
		индекс = СтрНайти(имяОбщегоТипа, "Объект",,СтрДлина(имяОбщегоТипа)-6);
	КонецЕсли;
	
	Возврат ?(
		индекс > 0,
		Лев(имяОбщегоТипа, СтрДлина(имяОбщегоТипа) - 6),
		имяОбщегоТипа
	);
	
КонецФункции

Процедура СообщитьПользователю(текст)
	
	Если не ЗначениеЗаполнено(текст) тогда возврат; КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция ЛогиЗаписать(текст)
	КонсольЛогов = КонсольЛогов + текст;
	Возврат КонсольЛогов;
КонецФункции

Функция ЛогиЗаписатьСтроку(текст)
	Возврат ЛогиЗаписать(Символы.ПС + Формат(ТекущаяДата(), "ДЛФ=T") +" | "+ текст);
КонецФункции

Функция NewCOMConnectionString(ТипБазы, Логин, Пароль, ПутьКФайловойБазе = "", ИмяСервера = "", ИмяБД = "")
	
	Если ТипБазы = ТипБазыФайловая() Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяСервера) И НЕ ЗначениеЗаполнено(ИмяБД) Тогда возврат неопределено; КонецЕсли;
		
		возврат СтрШаблон(
			"File=""%1"";Usr=""%2"";Pwd=""%3"";",
			ПутьКФайловойБазе,
			Логин,
			Пароль
		);
		
	Иначе // Если серверная
		
		Если НЕ ЗначениеЗаполнено(ПутьКФайловойБазе) Тогда возврат неопределено; КонецЕсли;
		
		возврат СтрШаблон(
			"Srvr=""%1"";Ref=""%2"";Usr=""%3"";Pwd=""%4"";",
			ИмяСервера,
			ИмяБД,
			Логин,
			Пароль
		);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
