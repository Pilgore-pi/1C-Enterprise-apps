
  ///////////////////////////////////
 ///////////////////////////////////
//// Добавить:
////   - При выборе справочника автоматически добавлять в ТЧ Строку Наименование
////     (для документа дату). Проверять, существует ли уже такая строка
////   - При вводе названия реквизита в поле, автоматически дублировать его во
////     втором поле, если оно пустое
////   - Написать валидатор вносимых значений согласно ограничениям на идентификатор 1С
////   - Переименовать ПутьКФайловойБазе в ПутьКФайлуДанных
//////////////////////////////////

#Область ОбработчикиСобытий


#Область Тестирование

&НаКлиенте
Процедура Тест_Файловая_ЭтаБаза(Команда)
	
	Объект.ТипБазы = ТипБазыФайловая();
	Объект.Логин = "Admin"; // Usr
	Объект.Пароль = "";
	Объект.ИмяБД = "";      // Ref
	Объект.ИмяСервера = ""; // Srvr
	Объект.ПутьКФайловойБазе = "C:\Users\Prishutov\Documents\InfoBase4";
	Объект.ТипОбъектаЭтойКонфигурации = "СправочникСсылка.Клиенты";
	Объект.КлючЗаписиИсточника = "Код";
	Объект.ТекстЗапроса =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Ссылка,
	|	Клиенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Клиенты.Код КАК Код,
	|	Клиенты.Наименование КАК Наименование,
	|	Клиенты.Телефон КАК Телефон,
	|	Клиенты.ДатаРождения КАК ДатаРождения,
	|	Клиенты.Почта КАК Почта
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты";
	
	стр = Объект.СопоставляемыеРеквизиты.Добавить();
	стр.ИмяРеквизитаВЭтойБазе = "Наименование"; стр.ИмяРеквизитаВУдаленнойБазе = "Наименование";
	стр = Объект.СопоставляемыеРеквизиты.Добавить();
	стр.ИмяРеквизитаВЭтойБазе = "Телефон";  	стр.ИмяРеквизитаВУдаленнойБазе = "Телефон";
	стр = Объект.СопоставляемыеРеквизиты.Добавить();
	стр.ИмяРеквизитаВЭтойБазе = "ДатаРождения"; стр.ИмяРеквизитаВУдаленнойБазе = "ДатаРождения";
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_БухСервер_ЭтаБаза(Команда)
	
	Объект.ТипБазы = ТипБазыСерверная();
	Объект.Логин = "Пришутов Андрей Николаевич"; // Usr
	Объект.Пароль = "B938g>";
	Объект.ИмяБД = "bux_3_test";  // Ref
	Объект.ИмяСервера = "srv-1c"; // Srvr
	Объект.ТипОбъектаЭтойКонфигурации = "СправочникСсылка.ВыборкаОстатков";
	Объект.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТребованиеНакладнаяМатериалы.Номенклатура КАК Номенклатура,
	|	СУММА(ТребованиеНакладнаяМатериалы.Количество) КАК Количество,
	|	ТребованиеНакладная.Склад КАК Склад
	|ПОМЕСТИТЬ Резервы
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК ТребованиеНакладнаяМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТребованиеНакладная КАК ТребованиеНакладная
	|		ПО ТребованиеНакладнаяМатериалы.Ссылка = ТребованиеНакладная.Ссылка
	|ГДЕ
	|	НЕ ТребованиеНакладная.ПометкаУдаления
	|	И НЕ ТребованиеНакладная.Проведен
	|	И ТребованиеНакладная.Дата > &РезервС
	|	И НЕ ТребованиеНакладная.Склад = ТребованиеНакладная.Субконто2
	|
	|СГРУППИРОВАТЬ ПО
	|	ТребованиеНакладная.Склад,
	|	ТребованиеНакладнаяМатериалы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыСправочник.Код КАК СкладКод,
	|	СкладыСправочник.Наименование КАК СкладНаименование,
	|	НоменклатураСправочник.Код КАК НоменклатураКод,
	|	НоменклатураСправочник.Наименование КАК НаименованиеНоменклатуры,
	|	НоменклатураСправочник.НаименованиеПолное КАК НаимНоменклатурыПолное,
	|	НоменклатураСправочник.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НоменклатураСправочник.Артикул = """"""""
	|			ТОГДА НоменклатураСправочник.Комментарий
	|		ИНАЧЕ НоменклатураСправочник.Артикул
	|	КОНЕЦ КАК ГОСТ,
	|	
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Остаток,
	|	Резервы.Количество КАК Резерв
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет.Код ПОДОБНО """"10%"""", , ) КАК ХозрасчетныйОстатки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыСправочник
	|		ПО ХозрасчетныйОстатки.Субконто2 = СкладыСправочник.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО ХозрасчетныйОстатки.Субконто1 = НоменклатураСправочник.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Резервы КАК Резервы
	|		ПО ХозрасчетныйОстатки.Субконто1 = Резервы.Номенклатура
	|			И ХозрасчетныйОстатки.Субконто2 = Резервы.Склад";
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаПодключиться(Команда)
	ОчиститьСообщения();
	КомандаПодключитьсяНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаПодключитьсяНаСервере()
	СоздатьПодключениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаФайловаяВЭту(Команда)
	
	ОчиститьСообщения();
	текстОшибки = "";
	КомандаФайловаяВЭтуНаСервере(текстОшибки);
	
	Если ЗначениеЗаполнено(текстОшибки) Тогда
		ПредупреждениеАсинх(текстОшибки,,"Предупреждение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаФайловаяВЭтуНаСервере(текстОшибки = "")
	
	обработка = ОбъектНаСервере();
	обработка.ЗагрузитьВОбъект(
		обработка.ТипОбъектаЭтойКонфигурации,
		обработка.КлючЗаписиИсточника,
		текстОшибки
	);
	Объект.КонсольЛогов = обработка.КонсольЛогов;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБухВСправочник(Команда)
	
	ОчиститьСообщения();
	текстОшибки = "";
	КомандаБухВСправочникНаСервере(текстОшибки);
	
	Если ЗначениеЗаполнено(текстОшибки) Тогда
		ПредупреждениеАсинх(текстОшибки,,"Предупреждение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаБухВСправочникНаСервере(текстОшибки = "")
	
	обработка = ОбъектНаСервере();
	подкл     = СоздатьПодключениеНаСервере();
	
	обработка.ЗагрузитьКлассификаторЕдИзм(текстОшибки, подкл);
	Если ЗначениеЗаполнено(текстОшибки) тогда возврат; КонецЕсли;
	
	обработка.ЗагрузитьНоменклатурныеГруппы(текстОшибки, подкл);
	Если ЗначениеЗаполнено(текстОшибки) тогда возврат; КонецЕсли;
	
	обработка.ЗагрузитьОстаткиЦС_вСправочник(
		текстОшибки,
		подкл
	);
	Объект.КонсольЛогов = обработка.КонсольЛогов;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьЛоги(Команда)
	Объект.КонсольЛогов = "";
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьТаблицу(Команда)
	Объект.СопоставляемыеРеквизиты.Очистить();
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Объект.ТипБазы = ТипБазыФайловая();
	
	//////////////////////Временно для тестирования///////////////////////////
	Тест_Файловая_ЭтаБаза(неопределено);
	////Тест_БухСервер_ЭтаБаза(неопределено);
	//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
	ПриИзмененииТипБазы(неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	КомандаОчиститьЛоги(неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораКаталога(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяПоля = Элемент.Имя;
	ДиалогВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	//Если пользователь не нажал кнопку ОТМЕНА в диалоге
	Если ДиалогВыборКаталога.Выбрать() Тогда
		ЭтаФорма[ИмяПоля] = ДиалогВыборКаталога.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры)
	
	Если ВыбранныеФайлы = неопределено тогда возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипБазы(Элемент)
	
	элементы.ИмяБД.Видимость             = (Объект.ТипБазы = ТипБазыСерверная());
	элементы.ИмяСервера.Видимость        = (Объект.ТипБазы = ТипБазыСерверная());
	элементы.ПутьКФайловойБазе.Видимость = (Объект.ТипБазы = ТипБазыФайловая());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитов(Элемент)
	
	Объект.ПутьКФайловойБазе          = СокрЛП (Объект.ПутьКФайловойБазе);
	Объект.ИмяБД                      = СокрЛП (Объект.ИмяБД);
	Объект.ИмяСервера                 = СокрЛП (Объект.ИмяСервера);
	Объект.Логин                      = СокрЛП (Объект.Логин);
	
	СтрокаПодключения = NewCOMConnectionString(
		Объект.ТипБазы,
		Объект.Логин,
		Объект.Пароль,
		Объект.ПутьКФайловойБазе,
		Объект.ИмяСервера,
		Объект.ИмяБ
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипОбъекта(Элемент)
	Объект.ТипОбъектаЭтойКонфигурации = СокрЛП(Объект.ТипОбъектаЭтойКонфигурации);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаОбъекта(Элемент)
	
	Объект.СопоставляемыеРеквизиты.Очистить();
	инфоТипов = СтрРазделить(Объект.ТипОбъектаЭтойКонфигурации, ".", ложь);
	
	Если Объект.СопоставляемыеРеквизиты.Количество() = 0 Тогда
		стр = Объект.СопоставляемыеРеквизиты.Добавить();
		
		Объект.СопоставляемыеРеквизиты.Очистить();
		Если Объект.ТипОбъектаЭтойКонфигурации = ТипОбъектаСправочник() Тогда
			
			Объект.КлючЗаписиИсточника  = "Код";
			
			стр.ИмяРеквизитаВЭтойБазе       = "Наименование";
			стр.ИмяРеквизитаВУдаленнойБазе  = "Наименование";
			стр.ОтображениеДанных = ВидПреобразованияПростой();
			
		ИначеЕсли Объект.ТипОбъектаЭтойКонфигурации = ТипОбъектаДокумент() Тогда
			
			Объект.КлючЗаписиИсточника  = "Номер";
			
			стр.ИмяРеквизитаВЭтойБазе       = "Дата";
			стр.ИмяРеквизитаВУдаленнойБазе  = "Дата";
			
			стр.ОтображениеДанных = ВидПреобразованияПростой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

&НаСервере
Функция ОбъектНаСервере()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(текст)
	
	Если ЗначениеЗаполнено(текст) тогда возврат; КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Числовое перечисление ТипБазы
&НаКлиентеНаСервереБезКонтекста Функция ТипБазыФайловая()                       возврат 0; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ТипБазыСерверная()                      возврат 1; конецФункции

// Числовое перечисление ТипОбъекта
&НаКлиентеНаСервереБезКонтекста Функция ТипОбъектаСправочник()                  возврат "СправочникСсылка"; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ТипОбъектаДокумент()                    возврат "ДокументСсылка"; конецФункции

// Числовое перечисление ОбработкаОдинаковых
&НаКлиентеНаСервереБезКонтекста Функция ОбработкаОдиноковыхНовыйИдентификатор() возврат 0; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ОбработкаОдиноковыхПропускать()         возврат 1; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ОбработкаОдиноковыхЗаменять()           возврат 2; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ОбработкаОдиноковыхВыводитьОшибку()     возврат 3; конецФункции

// Числовое перечисление ВидПреобразования
&НаКлиентеНаСервереБезКонтекста Функция ВидПреобразованияПростой()              возврат 0; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ВидПреобразованияНайтиПоКоду()          возврат 1; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ВидПреобразованияНайтиПоНаименованию()  возврат 2; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ВидПреобразованияНайтиПоРеквизиту()     возврат 3; конецФункции
&НаКлиентеНаСервереБезКонтекста Функция ВидПреобразованияНайтиПоНомеру()        возврат 4; конецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СоздатьПодключениеНаСервере()
	
	обработка = ОбъектНаСервере();
	обработка.ПутьКФайловойБазе = СокрЛП(обработка.ПутьКФайловойБазе);
	обработка.Логин             = СокрЛП(обработка.Логин);
	обработка.ИмяБД             = СокрЛП(обработка.ИмяБД);
	обработка.ИмяСервера        = СокрЛП(обработка.ИмяСервера);
	обработка.КлючЗаписиИсточника = СокрЛП(обработка.КлючЗаписиИсточника);
	
	подкл = обработка.СоздатьПодключение(строкаПодключения);
	
	Если подкл <> неопределено тогда
		СообщитьПользователю("COM-соединение успешно");
	КонецЕсли;
	
	возврат подкл;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция NewCOMConnectionString(ТипБазы, Логин, Пароль, ПутьКФайловойБазе = "", ИмяСервера = "", ИмяБД = "")
	
	Если ТипБазы = ТипБазыФайловая() Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяСервера) И НЕ ЗначениеЗаполнено(ИмяБД) Тогда возврат неопределено; КонецЕсли;
		
		возврат СтрШаблон(
			"File=""%1"";Usr=""%2"";Pwd=""%3"";",
			ПутьКФайловойБазе,
			Логин,
			Пароль
		);
		
	Иначе // Если серверная
		
		Если НЕ ЗначениеЗаполнено(ПутьКФайловойБазе) Тогда возврат неопределено; КонецЕсли;
		
		возврат СтрШаблон(
			"Srvr=""%1"";Ref=""%2"";Usr=""%3"";Pwd=""%4"";",
			ИмяСервера,
			ИмяБД,
			Логин,
			Пароль
		);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТЧ_ИмяРеквизитаЭтойБазыПриИзменении(Элемент)
	
	Если Объект.СопоставляемыеРеквизиты.Количество() = 0 тогда возврат; КонецЕсли;
	
	текСтрока = элементы.СопоставляемыеРеквизиты.ТекущиеДанные;
	
	Если   ЗначениеЗаполнено(текСтрока.ИмяРеквизитаВУдаленнойБазе)
	ИЛИ НЕ ЗначениеЗаполнено(текСтрока.ИмяРеквизитаВЭтойБазе)
	Тогда возврат; КонецЕсли;
	
	текСтрока.ИмяРеквизитаВУдаленнойБазе = текСтрока.ИмяРеквизитаВЭтойБазе;
	
КонецПроцедуры

#КонецОбласти