{1,
{4,
{"Templatos",1,0,"",""},
{0,
{"Ваши предложения по улучшению / Your suggestions for improvement",0,0,"","// Есть мысли по развитию шаблонов? Пишите на e-mail: stas@ganiev.pro или в Telegram: @stas_ganiev

// If you have a things about improvements, text me please on e-mail: stas@ganiev.pro or on Telegram: @stas_ganiev"}
},
{0,
{"Описание и история изменений / Description and versions history",0,0,"","// Шаблоны кода для работы в конфигураторе 1С:Предприятие 8.3
// Последнюю версию шаблонов всегда можно найти тут: https://github.com/stasganiev/OnesTemplates
// С уважением, Стас Ганиев (@stas_ganiev)

#Область 2024_05_16
	// (версия 8.3.6 от 16.05.2024)
	// К функциям упраления формой добавлен ""Экспорт""
	// Конструктор описания типа можно вызвать по сниппету ""Тип="" (""Type="")
	// Fix: Результат вставки директив Ext[ension] для английского языка исправлен с русского языка на английский
	// (Issue #6) В раздел ""Управляющие"" добавлен шаблон обработки странзакции с исключением, сниппет: ""Транз[акция]"", ""Trans[action]""
	// (Issue #7) Добавлена инструкция препроцессора структуры модуля с исключением, согласно стандарта 680.
	//   Вызывается по сниппетам ""№Если"", ""#Если"", ""#If""
	// Все сниппеты ""№Если"" и ""#Если"" заменены на ""№Е[сли]"" и ""#Е[сли]"" для ускорения набора
	// Добавлены отдельные инструкции препроцессора ""Сервер"" и ""Клиент"" для более быстрого доступа
	// В шаблоны разметки структуры модулей добавлены варианты без дополнительного наполнения (""только области"")
	// Добавлены расширенные варианты управляющих конструкций:
	//   - Блок условия с указанием выражения условия и вариантами ветвлений: ""Если="", ""If=""
	//   - Цикл Пока с указанием выражения условия: ""Пока="", ""While=""
	// Для шаблонов структуры модулей добавлены сниппет ""#М[одуль]"" (#M[odule]"") и ""стм"" (""mst"")
	// Добавлена структура модуля бизнес-процесса
	// Добавлен Возврат: ""Возв[рат]"", ""Retu[rn]""
	// Группа ""Инструкции препроцессора"" переименована в ""Инструкции, директивы, аннотации"", добавлены шаблоны ""Инстр[укция]"" и ""Дирек[тива]""
	// Добавлен выбор директивы компиляции по сниппету ""&[На]"", ""&At""
	// Добавлены аннотация расширения по символу ""&""
#КонецОбласти

#Область 2024_03_06
	// (версия 8.3.5 от 06.03.2024)
	// В прочие шаблоны добавлен ""Экспорт"" (Экс[порт])
	// В группу ""Запросы"" добавлено ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	// В раздел ""Комментарии"" добавлен ряд шаблонов для комментария кода с указанием
	//   номера задачи из таск-трекера и описания (сокращение ""/+[+]"", или ""/++"")
	// Первая версия Каталога шаблонов справочной системы (до раздела ""Общие объекты"" русской версии)
#КонецОбласти

#Область 2023_10_01
	// (версия 8.3.4 от 01.10.2023)
	// Новые разделы ""HTTP-сервисы""
	// Новый подраздел ""Формы"" в полезняшках
	// На странице репозитория добавлен README, описание проекта и первые инструкции
#КонецОбласти

#Область 2023_08_17
	// (версия 8.3.3 от 17.08.2023)
	// В разделе ""Раскладка клавиатуры"" добавлены ""кириллические аналоги"" почти всех подстановок аббревиатур (""нул[ь]"" = NULL, ""ФТП"" = FTP, и т.д.)
	// В полезняшки добавлено два варианта открытия формы записи регистра сведений
	// Добавлены новые шаблоны от Артура (сайт: 1CNIK.BY):
	//   В раздел ""Запросы"" добавлен шаблон комментария в запросе
	//   В раздел ""Табличный документ"" добавлен шаблон ПолучитьОбщийМакет
	//   17 новых в разделе ""Раскладка клавиатуры""
#КонецОбласти

#Область 2023_08_06
	// (версия 8.3.2 от 06.08.2023)
	// Для подстановки символа ""&"" дополнительно добавлен сниппет ""??""
	// Разделы ""Набор записей"" и ""Запись"" перенесены в группу ""Прикладные объекты""
	// Создана группа ""Общие объекты"", в которую перенесены группы ""Табличный документ"", ""Сообщение пользователю"" и ""Блокировки""
	// Добавлено сокращение БиблиотекаКартинок (БК)
	// Восстановлены пропущенные разделы ""Расширения"", ""Асинхронные вызовы"" и ""Полезняшки"" из первоисточника:
	//   Пересмотрена иерархия групп шаблонов и сортировка отдельных шаблонов, процедуры и функции приведины к единому виду с разделом ""Управляющие""
	//   Для всех шаблонов расширений добавлен общий сниппет ""Расш[ирение]""
	//   Для Описания оповещения добавлен сниппет ""Оповещ[ение]""
	//   Для асинхронных процедур и функций добавлен сниппеты ""Асинх[Процедура]"" и ""Асинх[Функция]"", без пробела. Варианты с пробелом сохранены для обратной совместимости
	// Исправлены выявленные ошибки
#КонецОбласти

#Область 2023_08_01
	// (версия 8.3.1 от 01.08.2023)
	// За основу комплекта шаблонов взята последняя версия разработки от Павла Чистова (с)
	// Устранены неоднозначности результата в рзных версиях одного шаблона; исправлены мелкие опечатки
	// Реализована английская версия для всех шаблонов
	// Добавлены вставки областей модулей с указание предопределенных имен спец. областей
	// Добавлены инструкции препроцессора для редактирования расширений в режиме контроля
	// Добавлена инструкция препроцессора - заглушка для неисполняемого кода
	// Инструкция препроцессора для выделения серверного контекста
	// Комментарии тех.долга
	// Расширенные варианты процедур и функций
	// Новые директивы компиляции и инструкции препроцесоора
	// Команды со спецсимволами можно вызывать через прямой и обратный слэш
	// Дня универсальных коллекций добавлен общий сниппет ""Коллек[ция]"", расширены возможности работы сколлекциями
	// Новая группа шаблонов ""ОткрытьФ[орму]"" для разных вариантов открытия управляемой формы справочника
	// Добавлены сокращения для ЗаполнитьЗначенияСвойств(), ЗначениеЗаполнено() и ТекущаяДатаСеанса()
	// Добавлены варианты локализации для НСтр() и ЧислоПрописью()
#КонецОбласти
"}
},
{17,
{"RU",1,0,"",""},
{29,
{"Ключевые слова и конструкции",1,0,"",""},
{0,
{"Если",0,0,"Есл","Если <?> тогда
	
КонецЕсли;"}
},
{0,
{"Если + Иначе",0,0,"Если=","Если <?> тогда
	
Иначе
	
КонецЕсли;"}
},
{0,
{"Если + ИначеЕсли",0,0,"Если=","Если <?> тогда
	
ИначеЕсли  тогда
	
Иначе

КонецЕсли;"}
},
{0,
{"Тогда",0,0,"Тог[д]","тогда <?>"}
},
{0,
{"Иначе",0,0,"Ина[ч]","Иначе
	<?>"}
},
{0,
{"ИначеЕсли",0,0,"ИначеЕ[сл]","ИначеЕсли <?> тогда"}
},
{0,
{"Тернарный оператор ?( )",0,0,"?()","?(<?>, ЕслиИстина, ЕслиЛожь)"}
},
{0,
{"Пока",0,0,"Пока","Пока <?> Цикл
	
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для=","Для индекс = 0 по Коллекция.Количество() Цикл
	<?>
КонецЦикла;"}
},
{0,
{"Для Каждого",0,0,"ДляК[аждого]","Для каждого строка из <?> Цикл
	
КонецЦикла;"}
},
{0,
{"Возврат",0,0,"Возв[ра]","возврат<?>"}
},
{0,
{"Попытка",0,0,"Попы[тк]","Попытка
	<?>
Исключение
	//ОписаниеОшибки()
КонецПопытки;"}
},
{0,
{"ВызватьИсключение",0,0,"ВызватьИ[сключени]","вызватьИсключение ""<?>"";"}
},
{0,
{"Транзакция",0,0,"Транз[акци]","НачатьТранзакцию();

Попытка
	<?>
	ЗафиксироватьТранзакцию();
Исключение
	ОтменитьТранзакцию();
	ЗаписьЖурналаРегистрации(
		НСтр(""ru = 'Выполнение операции'""),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
	);
КонецПопытки;"}
},
{0,
{"Транзакция",0,0,"НачатьТранз[акци]","НачатьТранзакцию();

Попытка
	<?>
	ЗафиксироватьТранзакцию();
Исключение
	ОтменитьТранзакцию();
	ЗаписьЖурналаРегистрации(
		НСтр(""ru = 'Выполнение операции'""),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
	);
КонецПопытки;"}
},
{0,
{"Экспорт",0,0,"Экс[пор]","экспорт<?>"}
},
{0,
{"Неопределено",0,0,"Неоп[ределен]","неопределено<?>"}
},
{0,
{"Продолжить",0,0,"продо[лжит]","продолжить;<?>"}
},
{0,
{"Прервать",0,0,"прер[ват]","прервать;<?>"}
},
{0,
{"КонецЕсли",0,0,"КонецЕ[сл]","КонецЕсли;<?>"}
},
{0,
{"КонецЦикла",0,0,"КонецЦ[икл]","КонецЦикла;<?>"}
},
{0,
{"КонецПроцедуры",0,0,"КонецП[роцедур]","КонецПроцедуры<?>"}
},
{0,
{"КонецФункции",0,0,"КонецФ[ункци]","КонецФункции<?>"}
},
{0,
{"КонецПопытки",0,0,"КонецПо[пытки]","КонецПопытки;<?>"}
},
{9,
{"Процедуры (Синхронные)",1,0,"",""},
{0,
{"Процедура",0,0,"Проц[едур]","Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Процедура (с параметрами)",0,0,"Процедура=","Процедура <?""Имя процедуры"">(<?""Параметры"">)
	<?>
КонецПроцедуры"}
},
{0,
{"Процедура (расширенная)",0,0,"Процедура=","<?""Выберите директиву компиляции"", ВыборВарианта, ""(без директивы)"", ""//"", ""НаКлиенте"", ""&НаКлиенте"", ""НаСервере"", ""&НаСервере"", ""НаКлиентеНаСервере (для модуля команды)"", ""&НаКлиентеНаСервере"", ""НаСервереБезКонтекста (для модуля формы)"", ""&НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста (для модуля формы)"", ""&НаКлиентеНаСервереБезКонтекста"">
Процедура <?""Имя процедуры"">(<?""Параметры"">)<?""Экспортная процедура"", ВыборВарианта, ""Экспортная"", "" Экспорт"", ""Не экспортная"", """">
	<?>
КонецПроцедуры"}
},
{0,
{"Процедура НаКлиенте",0,0,"НаКли[ент]","&НаКлиенте
Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Процедура НаСервере",0,0,"НаСер[вер]","&НаСервере
Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Процедура НаСервереБезКонтекста (модуль формы)",0,0,"НаСервереБ[езКонтекст]","&НаСервереБезКонтекста
Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Процедура НаКлиентеНаСервереБезКонтекста (модуль формы)",0,0,"НаКлиентеН[аСервереБезКонтекст]","&НаКлиентеНаСервереБезКонтекста
Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Процедура НаКлиентеНаСервере (модуль команды)",0,0,"НаКлиентеН[аСервер]","&НаКлиентеНаСервере
Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Процедура без контекста",0,0,"БезКон[текстаПроцедур]","&<?""Разновидность безконтекстного метода"", ВыборВарианта, ""На клиенте"", ""НаКлиенте"", ""На сервере"", ""НаСервере"", ""На клиенте и на сервере"", ""НаКлиентеНаСервере"">БезКонтекста
Процедура <?>()
	
КонецПроцедуры"}
}
},
{9,
{"Процедуры (Асинхронные)",1,0,"",""},
{0,
{"Асинх Процедура",0,0,"АсинхП[роцедура]","Асинх Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Асинх Процедура",0,0,"АПроц[едура]","Асинх Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Асинх Процедура (с параметрами)",0,0,"АсинхПроцедура=","Асинх Процедура <?""Имя процедуры"">(<?""Параметры"">)
	<?>
КонецПроцедуры"}
},
{0,
{"Асинх Процедура (полная)",0,0,"АсинхПроцедура=","<?""Выберите директиву компиляции"", ВыборВарианта, ""(без директивы)"", ""//"", ""НаКлиенте"", ""&НаКлиенте"", ""НаСервере"", ""&НаСервере"", ""НаКлиентеНаСервере (для модуля команды)"", ""&НаКлиентеНаСервере"", ""НаСервереБезКонтекста (для модуля формы)"", ""&НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста (для модуля формы)"", ""&НаКлиентеНаСервереБезКонтекста"">
Асинх Процедура <?""Имя процедуры"">(<?""Параметры"">)<?""Экспортная процедура"", ВыборВарианта, ""Экспортная"", "" Экспорт"", ""Не экспортная"", """">
	<?>
КонецПроцедуры"}
},
{0,
{"Асинх Процедура НаКлиенте",0,0,"АсинхНаКли[ент]","&НаКлиенте
Асинх Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Асинх Процедура НаСервере",0,0,"АсинхНаСер[вер]","&НаСервере
Асинх Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Асинх Процедура НаСервереБезКонтекста (модуль формы)",0,0,"АсинхНаСервереБ[езКонтекст]","&НаСервереБезКонтекста
Асинх Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Асинх Процедура НаКлиентеНаСервереБезКонтекста (модуль формы)",0,0,"АсинхНаКлиентеН[аСервереБезКонтекст]","&НаКлиентеНаСервереБезКонтекста
Асинх Процедура <?>()
	
КонецПроцедуры"}
},
{0,
{"Асинх Процедура НаКлиентеНаСервере (модуль команды)",0,0,"АсинхНаКлиентеН[аСервер]","&НаКлиентеНаСервере
Асинх Процедура <?>()
	
КонецПроцедуры"}
}
},
{9,
{"Функции (Синхронные)",1,0,"",""},
{0,
{"Функция без контекста",0,0,"БезКон[текстаФункци]","&<?""Разновидность безконтекстного метода"", ВыборВарианта, ""На клиенте"", ""НаКлиенте"", ""На сервере"", ""НаСервере"", ""На клиенте и на сервере"", ""НаКлиентеНаСервере"">БезКонтекста
Функция ()
	
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция",0,0,"Функ[ци]","Функция <?>()
	
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция (с параметрами)",0,0,"Функция=","Функция <?""Имя функции"">(<?""Параметры"">)
	<?>
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция (полная)",0,0,"Функция=","<?""Выберите директиву компиляции"", ВыборВарианта, ""(без директивы)"", ""//"", ""НаКлиенте"", ""&НаКлиенте"", ""НаСервере"", ""&НаСервере"", ""НаКлиентеНаСервере (для модуля команды)"", ""&НаКлиентеНаСервере"", ""НаСервереБезКонтекста (для модуля формы)"", ""&НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста (для модуля формы)"", ""&НаКлиентеНаСервереБезКонтекста"">
Функция <?""Имя функции"">(<?""Параметры"">)<?""Экспортная фукнция"", ВыборВарианта, ""Экспортная"", "" Экспорт"", ""Не экспортная"", """">
	<?>
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция НаКлиенте",0,0,"НаКли[ент]","&НаКлиенте
Функция <?>()
	
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция НаСервере",0,0,"НаСер[вер]","&НаСервере
Функция <?>()
	
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция НаСервереБезКонтекста (модуль формы)",0,0,"НаСервереБ[езКонтекст]","&НаСервереБезКонтекста
Функция <?>()
	
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция НаКлиентеНаСервереБезКонтекста (модуль формы)",0,0,"НаКлиентеН[аСервереБезКонтекст]","&НаКлиентеНаСервереБезКонтекста
Функция <?>()
	
	Возврат неопределено;
КонецФункции"}
},
{0,
{"Функция НаКлиентеНаСервере (модуль команды)",0,0,"НаКлиентеН[аСервер]","&НаКлиентеНаСервере
Функция <?>()
	
	Возврат неопределено;
КонецФункции"}
}
},
{9,
{"Функции (Асинхронные)",1,0,"",""},
{0,
{"Асинх Функция",0,0,"АсинхФ[ункция]","Асинх Функция <?>()
	
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция",0,0,"АФунк[ция]","Асинх Функция <?>()
	
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция (с параметрами)",0,0,"АсинхФункция=","Асинх Функция <?""Имя функции"">(<?""Параметры"">)
	<?>
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция (полная)",0,0,"АсинхФункция=","<?""Выберите директиву компиляции"", ВыборВарианта, ""(без директивы)"", ""//"", ""НаКлиенте"", ""&НаКлиенте"", ""НаСервере"", ""&НаСервере"", ""НаКлиентеНаСервере (для модуля команды)"", ""&НаКлиентеНаСервере"", ""НаСервереБезКонтекста (для модуля формы)"", ""&НаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста (для модуля формы)"", ""&НаКлиентеНаСервереБезКонтекста"">
Асинх Функция <?""Имя функции"">(<?""Параметры"">)<?""Экспортная фукнция"", ВыборВарианта, ""Экспортная"", "" Экспорт"", ""Не экспортная"", """">
	<?>
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция НаКлиенте",0,0,"АсинхНаКли[ент]","&НаКлиенте
Асинх Функция <?>()
	
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция НаСервере",0,0,"АсинхНаСер[вер]","&НаСервере
Асинх Функция <?>()
	
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция НаСервереБезКонтекста",0,0,"АсинхНаСервереБ[езКонтекст]","&НаСервереБезКонтекста
Асинх Функция <?>()
	
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция НаКлиентеНаСервереБезКонтекста (только модули упр.форм)",0,0,"АсинхНаКлиентеН[аСервереБезКонтекст]","&НаКлиентеНаСервереБезКонтекста
Асинх Функция <?>()
	
	возврат неопределено;
КонецФункции"}
},
{0,
{"Асинх Функция НаКлиентеНаСервере (только модули команд)",0,0,"АсинхНаКлиентеН[аСервер]","&НаКлиентеНаСервере
Асинх Функция <?>()
	
	возврат неопределено;
КонецФункции"}
}
},
{25,
{"Конструктор объекта: новый Объект();",1,0,"",""},
{0,
{"Структура",0,0,"новый=","новый Структура(""<?>"", )"}
},
{0,
{"Структура",0,0,"новыйСтру[ктура]","новый Структура(""<?>"", )"}
},
{0,
{"ФиксированнаяСтруктура",0,0,"новыйФСтру[ктура]","новый ФиксированнаяСтруктура(<?>)"}
},
{0,
{"Массив",0,0,"новый=","новый Массив(<?>);"}
},
{0,
{"Массив",0,0,"новыйМа[ссив]","новый Массив(<?>);"}
},
{0,
{"ФиксированныйМассив",0,0,"новыйФМа[ссив]","новый ФиксированныйМассив(<?>)"}
},
{0,
{"Соответствие",0,0,"новый=","новый Соответствие;
<?>"}
},
{0,
{"Соответствие",0,0,"новыйСо[ответствие]","новый Соответствие;
<?>"}
},
{0,
{"ФиксированноеСоответствие",0,0,"новыйФСо[ответствие]","новый ФиксированноеСоответствие(<?>)"}
},
{0,
{"СписокЗначений",0,0,"новый=","новый СписокЗначений;
<?>"}
},
{0,
{"СписокЗначений",0,0,"новыйСп[исокЗначений]","новый СписокЗначений;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"новый=","новый ДеревоЗначений;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"новыйД[еревоЗначений]","новый ДеревоЗначений;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"новыйДЗ","новый ДеревоЗначений;
<?>"}
},
{0,
{"ТаблицаЗначений",0,0,"новый=","новый ТаблицаЗначений;
<?>"}
},
{0,
{"ТаблицаЗначений",0,0,"новыйТа[блицаЗначений]","новый ТаблицаЗначений;
<?>"}
},
{0,
{"ТаблицаЗначений",0,0,"новыйТЗ","новый ТаблицаЗначений;
<?>"}
},
{0,
{"Шрифт",0,0,"новыйШ[рифт]","новый Шрифт(<?>);"}
},
{0,
{"Дата",0,0,"новыйДа[та]","Дата(<?>)"}
},
{0,
{"Квалификатор числа",0,0,"новыйквал[ификато]","новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);"}
},
{0,
{"Квалификатор даты",0,0,"новыйквал[ификато]","новый КвалификаторыДаты(ЧастиДаты.Дата);"}
},
{0,
{"Квалификатор строки",0,0,"новыйквал[ификато]","Новый КвалификаторыСтроки(100, ДопустимаяДлина.Фиксированная);"}
},
{0,
{"Квалификатор числа",0,0,"новыйквал[ификато]","новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);"}
},
{0,
{"Документ",0,0,"новыйДок[умент]","Документы.<?>.СоздатьДокумент();

"}
},
{0,
{"Справочник",0,0,"новыйСпр[авочник]","Справочники.<?>.СоздатьЭлемент();"}
}
}
},
{10,
{"БСП",1,0,"",""},
{0,
{"ОбщегоНазначения",0,0,"Общег[оНазначени]","ОбщегоНазначения<?"""", ВыборВарианта, ""Сервер"", """", ""Клиент"", ""Клиент"", ""Клиент и Сервер"", ""КлиентСервер"">.<?>"}
},
{0,
{"СообщитьПользователю()",0,0,"сооб[щит]","<?""Выберите, где будет выводится сообщение"", ВыборВарианта, ""На клиенте"", ""ОбщегоНазначенияКлиент"", ""На сервере"", ""ОбщегоНазначения"", ""На клиенте и на сервере"", ""ОбщегоНазначенияКлиентСервер"">.СообщитьПользователю(""<?>"");"}
},
{0,
{"СтрокаВДату()",0,0,"СтрокаВДа[ту]","СтроковыеФункцииКлиентСервер.СтрокаВДату(<?>);"}
},
{0,
{"СтрокаВЧисло()",0,0,"СтрокаВЧи[сло]","// Формат строки с датой должен быть в таким: ДД.ММ.ГГГГ, ДД/ММ/ГГ или ДД-ММ-ГГ ЧЧ:ММ:СС
СтроковыеФункцииКлиентСервер.СтрокаВЧисло(<?>, ЧастиДаты.ДатаВремя);"}
},
{0,
{"СвернутьМассив()",0,0,"СвернутьМ[ассив]","ОбщегоНазначенияКлиентСервер.СвернутьМассив(<?>);
"}
},
{0,
{"ТЗвМассивСтруктур",0,0,"ТЗвМ[ассив]","// таблица значений -> массив структур
ОбщегоНазначения.ТаблицаЗначенийВМассив(<?>);"}
},
{0,
{"ТЗвМассивСтруктур",0,0,"ТаблицаЗначенийвМ[ассив]","// таблица значений -> массив структур
ОбщегоНазначения.ТаблицаЗначенийВМассив(<?>);"}
},
{0,
{"ОписаниеТипа",0,0,"ОписаниеТ[ип]","ОбщегоНазначения.ОписаниеТипа<?""Выберите описываемый тип"", ВыборВарианта, ""Число"", ""Число"", ""Строка"", ""Строка"", ""Дата"", ""Дата"", ""Все ссылки"", ""ВсеСсылки"">(<?>);"}
},
{0,
{"Значение реквизита(-ов) объекта(-ов) (с подсказкой)",0,0,"ЗначениеРек[визита]","// Зн-е реквизитА объектА: Любой тип;
// Зн-е реквизитОВ объектА: Структура;
// Зн-е реквизитА объектОВ: Соответствие;
// Зн-е реквизитОВ объектОВ: Соответствие структур
ОбщегоНазначения.Значение<?""Что нужно получить?"", ВыборВарианта, ""Значение одного реквизита"", ""Реквизита"", ""Значение нескольких реквизитов"", ""Реквизитов""><?""Из какого количества объектов нужно получать реквизиты?"", ВыборВарианта, ""Один объект"", ""Объекта"", ""Несколько объектов"", ""Объектов"">(<?>, ""НазванияСвойств"");"}
},
{0,
{"Значение реквизита(-ов) объекта(-ов)",0,0,"ЗначениеРек[визита]","ОбщегоНазначения.Значение<?""Что нужно получить?"", ВыборВарианта, ""Значение одного реквизита"", ""Реквизита"", ""Значение нескольких реквизитов"", ""Реквизитов""><?""Из какого количества объектов нужно получать реквизиты?"", ВыборВарианта, ""Один объект"", ""Объекта"", ""Несколько объектов"", ""Объектов"">(<?>, ""НазванияСвойств"");"}
}
},
{25,
{"Основное",1,0,"",""},
{3,
{"Формы",1,0,"",""},
{0,
{"ОткрытьФорму(...)",0,0,"открытьФ[орму]","ПараметрыФормы = новый Структура(""КЛЮЧИ"", ЗНАЧЕНИЯ);
ОткрытьФорму(""<?>"", ПараметрыФормы);"}
},
{0,
{"ОткрытьФорму(Форма, Окно)",0,0,"ОткрытьОбъектФ[ормы]","ОткрытьФорму(<?>);"}
},
{0,
{"ОткрытьФорму(Форма, Окно)",0,0,"ОткрытьФорму[Ссылка]","ОткрытьФорму(<?>);"}
}
},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Формат даты: Месяц",0,0,"ФорматД[аты]","Формат(<?>, ""ДФ=ММММ"");"}
},
{0,
{"Формат даты: Год",0,0,"ФорматД[аты]","Формат(<?>, ""ДФ='гггг ''г.'''"");"}
},
{0,
{"Формат даты: Месяц и год",0,0,"ФорматД[аты]","Формат(<?>, ""ДФ='ММММ гггг ''г.'''"");"}
},
{0,
{"Конструктор описания типов",0,0,"Конструк[торОписанияТипов]","<?""Конструктор описания типов"", КонструкторОписанияТипов>
<?>"}
},
{0,
{"Конструктор описания типов",0,0,"Конструктор=","<?""Конструктор описания типов"", КонструкторОписанияТипов>
<?>"}
},
{0,
{"Конструктор описания типов",0,0,"ОписаниеТипов=","<?""Конструктор описания типов"", КонструкторОписанияТипов>
<?>"}
},
{0,
{"Конструктор описания типов",0,0,"ОписаниеТипа=","<?""Конструктор описания типов"", КонструкторОписанияТипов>
<?>"}
},
{0,
{"Описание типа: ЧИСЛО",0,0,"описаниеЧисла=","описаниеЧисла = новый ОписаниеТипов(""Число"",
	новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)
);
<?>"}
},
{0,
{"Описание типа: ЧИСЛО",0,0,"ОписаниеТипа=","описаниеЧисла = новый ОписаниеТипов(""Число"",
	новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)
);
<?>"}
},
{0,
{"Описание типа: ДАТА",0,0,"описаниеДаты=","описаниеДаты = новый ОписаниеТипов(""Дата"", , ,
	новый КвалификаторыДаты(ЧастиДаты.Дата)
);
<?>"}
},
{0,
{"Описание типа: ДАТА",0,0,"ОписаниеТипа=","описаниеДаты = новый ОписаниеТипов(""Дата"", , ,
	новый КвалификаторыДаты(ЧастиДаты.Дата)
);
<?>"}
},
{0,
{"Описание типа: БУЛЕВО",0,0,"описаниеБулево=","описаниеБулево = новый ОписаниеТипов(""Булево"");
<?>"}
},
{0,
{"Описание типа: БУЛЕВО",0,0,"ОписаниеТипа=","описаниеБулево = новый ОписаниеТипов(""Булево"");
<?>"}
},
{0,
{"Описание типа: СТРОКА",0,0,"описаниеСтроки=","описаниеСтроки = новый ОписаниеТипов(""Строка"", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)
);
<?>"}
},
{0,
{"Описание типа: СТРОКА",0,0,"ОписаниеТипа=","описаниеСтроки = новый ОписаниеТипов(""Строка"", ,
	Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)
);
<?>"}
},
{0,
{"Проверка типа",0,1,"ПроверкаТип[а]","ТипЗнч(<?""Какое выражение проверяется?"">) = Тип(""<?""Какого типа должно быть выражение?"", ВыборТипа>"")<?>"}
},
{0,
{"Шрифт",0,0,"Шрифт=","// Параметры: Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый
Шрифт = новый Шрифт(<?>);"}
},
{0,
{"ЧислоПрописью (Рубль, Россия)",0,0,"ЧислоП[рописью]","ЧислоПрописью(<?>, ""Л = ru_RU; ДП = Истина"", ""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"");"}
},
{0,
{"ЧислоПрописью (Доллар, США)",0,0,"ЧислоП[рописью]","ЧислоПрописью(<?>, ""Л = en_US; ДП = Истина"", ""dollar, dollars, cent, cents, 2"");"}
},
{0,
{"ЧислоПрописью (Евро, Германия)",0,0,"ЧислоП[рописью]","ЧислоПрописью(<?>, ""Л = de_DE; ДП = Истина"", ""EURO, EURO, М, Cent, Cent, M, 2"");"}
},
{0,
{"ЧислоПрописью (Роны, Румыния)",0,0,"ЧислоП[рописью]","ЧислоПрописью(<?>, ""Л = ro_RO; ДП = Истина"", ""leu, lei, M, ban, bani, W, 2"");"}
},
{0,
{"НСтр RU",0,0,"НСтр","НСтр(""ru='<?>'"", ""ru"")"}
},
{0,
{"НСтр RU EN",0,0,"НСтр","НСтр(""ru = '<?>...'; en = '...'"")"}
}
},
{2,
{"Комментарии и области",1,0,"",""},
{8,
{"Область",1,0,"",""},
{0,
{"Область обыкновенная",0,0,"обл[аст]","#Область <?>



#КонецОбласти"}
},
{0,
{"Область (общий модуль)",0,0,"Область=","#Область <?""Имя области"", ВыборВарианта, ""ПрограммныйИнтерфейс"", ""ПрограммныйИнтерфейс"", ""СлужебныйПрограммныйИнтерфейс"", ""СлужебныйПрограммныйИнтерфейс"", ""СлужебныеПроцедурыИФункции"", ""СлужебныеПроцедурыИФункции"">

<?>

#КонецОбласти"}
},
{0,
{"Область (модуль объекта)",0,0,"Область=","#Область <?""Имя области"", ВыборВарианта, ""ОписаниеПеременных"", ""ОписаниеПеременных"", ""ПрограммныйИнтерфейс"", ""ПрограммныйИнтерфейс"", ""ОбработчикиСобытий"", ""ОбработчикиСобытий"", ""СлужебныйПрограммныйИнтерфейс"", ""СлужебныйПрограммныйИнтерфейс"", ""СлужебныеПроцедурыИФункции"", ""СлужебныеПроцедурыИФункции"", ""Инициализация"", ""Инициализация"">

<?>

#КонецОбласти"}
},
{0,
{"Область (модуль менеджера)",0,0,"Область=","#Область <?""Имя области"", ВыборВарианта, ""ПрограммныйИнтерфейс"", ""ПрограммныйИнтерфейс"", ""ОбработчикиСобытий"", ""ОбработчикиСобытий"", ""СлужебныйПрограммныйИнтерфейс"", ""СлужебныйПрограммныйИнтерфейс"", ""СлужебныеПроцедурыИФункции"", ""СлужебныеПроцедурыИФункции"">

<?>

#КонецОбласти"}
},
{0,
{"Область (модуль формы)",0,0,"Область=","#Область <?""Имя области"", ВыборВарианта, ""ОписаниеПеременных"", ""ОписаниеПеременных"", ""ОбработчикиСобытийФормы"", ""ОбработчикиСобытийФормы"", ""ОбработчикиСобытийЭлементовШапкиФормы"", ""ОбработчикиСобытийЭлементовШапкиФормы"", ""ОбработчикиСобытийЭлементовТаблицыФормы"", ""ОбработчикиСобытийЭлементовТаблицыФормы#ИмяТаблицы"", ""ОбработчикиКомандФормы"", ""ОбработчикиКомандФормы"", ""СлужебныеПроцедурыИФункции"", ""СлужебныеПроцедурыИФункции"">

<?>

#КонецОбласти"}
},
{0,
{"Область (модуль команды)",0,0,"Область=","#Область <?""Имя области"", ВыборВарианта, ""ОбработчикиСобытий"", ""ОбработчикиСобытий"", ""СлужебныеПроцедурыИФункции"", ""СлужебныеПроцедурыИФункции"">

#КонецОбласти"}
},
{0,
{"КонецОбласти",0,0,"№КонецОб[ласти]","#КонецОбласти<?>"}
},
{0,
{"#",0,0,"№№","#"}
}
},
{16,
{"Структура модулей",1,0,"",""},
{0,
{"Общий модуль",0,0,"Модуль=","///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
// 
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Общий модуль",0,0,"#М[одуль]","///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
// 
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Общий модуль (только области)",0,0,"Модуль=","#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Общий модуль (только области)",0,0,"#М[одуль]","#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Модуль объекта",0,0,"Модуль=","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"Модуль объекта",0,0,"#М[одуль]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"Модуль менеджера",0,0,"Модуль=","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"Модуль менеджера",0,0,"#М[одуль]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"Модуль формы",0,0,"Модуль=","#Область ОписаниеПеременных

#КонецОбласти


#Область ОбработчикиСобытийФормы

#КонецОбласти


#Область ОбработчикиКомандФормы

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Модуль формы",0,0,"#М[одуль]","#Область ОписаниеПеременных

#КонецОбласти


#Область ОбработчикиСобытийФормы

#КонецОбласти


#Область ОбработчикиКомандФормы

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Модуль команды",0,0,"Модуль=","#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	//TODO: Вставить содержимое обработчика.
	//ПараметрыФормы = Новый Структура("""", );
	//ОткрытьФорму(""ОбщаяФорма."", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно, ПараметрыВыполненияКоманды.НавигационнаяСсылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Модуль команды",0,0,"#М[одуль]","#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	//TODO: Вставить содержимое обработчика.
	//ПараметрыФормы = Новый Структура("""", );
	//ОткрытьФорму(""ОбщаяФорма."", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно, ПараметрыВыполненияКоманды.НавигационнаяСсылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Модуль команды (только области)",0,0,"Модуль=","#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Модуль команды (только области)",0,0,"#М[одуль]","#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Модуль бизнес-процесса",0,0,"Модуль=","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
"}
},
{0,
{"Модуль бизнес-процесса",0,0,"#М[одуль]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
"}
}
}
},
{9,
{"Инструкции, директивы, аннотации",1,0,"",""},
{0,
{"#Если Сервер",0,0,"#Е[сли]","#Если Сервер Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если Сервер",0,0,"№Е[сли]","#Если Сервер Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если Клиент",0,0,"#Е[сли]","#Если Клиент Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если Клиент",0,0,"№Е[сли]","#Если Клиент Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если (выбор)",0,0,"#Е[сли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""НаКлиенте"", ""НаКлиенте"", ""Сервер"", ""Сервер"", ""НаСервере"", ""НаСервере"", ""ВнешнееСоединение"", ""ВнешнееСоединение"" ,""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"",""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""МобильноеПриложениеКлиент"", ""МобильноеПриложениеКлиент"", ""МобильноеПриложениеСервер"", ""МобильноеПриложениеСервер"", ""МобильныйКлиент"", ""МобильныйКлиент"", ""МобильныйАвтономныйСервер"", ""МобильныйАвтономныйСервер""> Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если (выбор)",0,0,"№Е[сли]","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""НаКлиенте"", ""НаКлиенте"", ""Сервер"", ""Сервер"", ""НаСервере"", ""НаСервере"", ""ВнешнееСоединение"", ""ВнешнееСоединение"" ,""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"",""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент"", ""МобильноеПриложениеКлиент"", ""МобильноеПриложениеКлиент"", ""МобильноеПриложениеСервер"", ""МобильноеПриложениеСервер"", ""МобильныйКлиент"", ""МобильныйКлиент"", ""МобильныйАвтономныйСервер"", ""МобильныйАвтономныйСервер""> Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если (серверный модуль)",0,0,"#Е[сли]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
<?>
#КонецЕсли"}
},
{0,
{"#Если (серверный модуль)",0,0,"№Е[сли]","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
<?>
#КонецЕсли"}
},
{0,
{"Аннотация расширения (имя процедуры)",0,0,"&","<?"""", ВыборВарианта, ""Перед"",""&Перед"", ""После"",""&После"", ""Вместо"",""&Вместо"", ""ИзменениеИКонтроль"",""&ИзменениеИКонтроль"">(""<?""Имя процедуры"">"")"}
}
},
{25,
{"Язык запросов",1,0,"",""},
{0,
{"Выборка",0,0,"Выборка=","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл
	
КонецЦикла;"}
},
{0,
{"Конструктор запроса (полный)",0,1,"Констр[укторЗапроса]","Запрос = Новый Запрос;
Запрос.Текст = 
""<?"""", ТекстЗапроса>"";

Запрос.УстановитьПараметр("""", );
РезультатЗапроса = Запрос.Выполнить();

Если РезультатЗапроса.Пустой() Тогда
	Возврат;
КонецЕсли;

Выборка = РезультатЗапроса.Выбрать();
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;
"}
},
{0,
{"Конструктор запроса (простой)",0,0,"Констр[укторЗапроса]","Запрос = Новый Запрос;
Запрос.Текст = 
""<?"""", ТекстЗапроса>"";

<?>Запрос.УстановитьПараметр("""", );
РезультатЗапроса = Запрос.Выполнить();
"}
},
{0,
{"Запрос вручную",0,0,"Запрос=","Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
|	<?>
|
|
|
|"";

Запрос.УстановитьПараметр("""", );
РезультатЗапроса = Запрос.Выполнить();
"}
},
{0,
{"Запрос без конструктора с обработкой результата",0,0,"Запрос=","Запрос = Новый Запрос;
Запрос.Текст = 
""<?>"";

Запрос.УстановитьПараметр("""", );
РезультатЗапроса = Запрос.Выполнить();

Если РезультатЗапроса.Пустой() Тогда
	Возврат; //Продолжить|Прервать
КонецЕсли;

Выборка = РезультатЗапроса.Выбрать();
Пока Выборка.Следующий() Цикл
	
КонецЦикла;
"}
},
{0,
{"Документ",0,0,"Документ.","Документ.<?"""", ОбъектМетаданных, ""Документ"", ""Документ.ТабличнаяЧасть"">"}
},
{0,
{"Справочник",0,0,"Справочник.","Справочник.<?"""", ОбъектМетаданных, ""Справочник"", ""Справочник.ТабличнаяЧасть"">"}
},
{0,
{"РегистрСведений",0,0,"Регис[трСведений.]","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""СрезПервых"", "".СрезПервых(<?>)"", ""СрезПоследних"", "".СрезПоследних(<?>)"">"}
},
{0,
{"РегистрНакопления",0,0,"РегистрН[акопления.]","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"">"}
},
{0,
{"РегистрБухгалтерии",0,0,"РегистрБ[ухгалтерии.]","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Субконто"", "".Субконто"", ""ДвиженияССубконто"", "".ДвиженияССубконто(<?>)"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"", ""ОборотыДтКт"", "".ОборотыДтКт(<?>)"">"}
},
{0,
{"РегистрРасчета",0,0,"РегистрР[асчета.]","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Перерасчет"">"}
},
{0,
{"поле КАК псевдоним",0,0,"как=","_Поле_ КАК _Псевдоним_,<?>"}
},
{0,
{"ЛЕВОЕ СОЕДИНЕНИЕ",0,0,"левоеС[оединени]","ЛЕВОЕ СОЕДИНЕНИЕ<?>"}
},
{0,
{"ПРАВОЕ СОЕДИНЕНИЕ",0,0,"правоеС[оединени]","ПРАВОЕ СОЕДИНЕНИЕ<?>"}
},
{0,
{"ВНУТРЕННЕЕ СОЕДИНЕНИЕ",0,0,"внутреннееС[оединени]","ВНУТРЕННЕЕ СОЕДИНЕНИЕ<?>"}
},
{0,
{"ПОЛНОЕ СОЕДИНЕНИЕ",0,0,"полноеС[оединени]","ПОЛНОЕ СОЕДИНЕНИЕ<?>"}
},
{0,
{"СОЕДИНЕНИЕ (Выбор варианта)",0,0,"соединение=","<?""Выберите тип соединения"", ВыборВарианта, ""Левое"", ""ЛЕВОЕ"", ""Правое"", ""ПРАВОЕ"", ""Внутреннее"", ""ВНУТРЕННЕЕ"", ""Полное"", ""ПОЛНОЕ""> СОЕДИНЕНИЕ <?>
ПО <?>
"}
},
{0,
{"ОБЪЕДИНИТЬ",0,0,"объед[инит]","ОБЪЕДИНИТЬ <?>"}
},
{0,
{"СГРУППИРОВАТЬ ПО",0,0,"сгрупп[ироват]","СГРУППИРОВАТЬ ПО
    <?>
ИМЕЮЩИЕ
    "}
},
{0,
{"ВЫБРАТЬ (Полный)",0,0,"выбрать=","ВЫБРАТЬ //ПЕРВЫЕ ? //РАЗРЕШЕННЫЕ //РАЗЛИЧНЫЕ
    Поле1 КАК Псевдоним1,
    Поле2 КАК Псевдоним2
ИЗ
    <?>
ГДЕ 
    <?>
УПОРЯДОЧИТЬ ПО <?> ВОЗР //УБЫВ //ИЕРАРХИЯ //АВТОУПОРЯДОЧИВАНИЕ"}
},
{0,
{"ВЫБРАТЬ (Простой)",0,0,"выбрать=","ВЫБРАТЬ 
    *
ИЗ
    <?>"}
},
{0,
{"ВЫБРАТЬ (ГДЕ)",0,0,"выбрать=","ВЫБРАТЬ 
    *
ИЗ
    <?>
ГДЕ
    <?>"}
},
{0,
{"ВЫБРАТЬ (Простой)",0,0,"выбр[ат]","ВЫБРАТЬ 
    *
ИЗ
    <?>"}
},
{0,
{"ВЫБОР",0,0,"выборК[огда]","ВЫБОР
    КОГДА <?> ТОГДА <?>
	КОГДА <?> ТОГДА <?>
    ИНАЧЕ <?>
КОНЕЦ КАК _ПСЕВДОНИМ_"}
},
{0,
{"|",0,0,"\","|<?>"}
}
},
{35,
{"Раскладка клавиатуры",1,0,"",""},
{0,
{">",0,0,"Ю","> <?>"}
},
{0,
{"<",0,0,"Б","< <?>"}
},
{0,
{"<>",0,0,"БЮ","<> <?>"}
},
{0,
{"<=",0,0,"Б=","<= <?>"}
},
{0,
{">=",0,0,"Ю=",">= <?>"}
},
{0,
{"ЕстьТгдд",0,0,"ЕстьТгдд","ЕстьNULL(<?>)"}
},
{0,
{"ЕстьТгдд",0,0,"ЕстьНул[ь]","ЕстьNULL(<?>)"}
},
{0,
{"NULL",0,0,"тгдд","NULL<?>"}
},
{0,
{"NULL",0,0,"нул[ь]","NULL<?>"}
},
{0,
{"[  ]",0,0,"хъ","[<?>]"}
},
{0,
{"'?'",0,0,"ээ","'<?>'"}
},
{0,
{"&",0,0,"??","&<?>"}
},
{0,
{"WebЦвета",0,0,"цуицвета","WebЦвета<?>"}
},
{0,
{"WebЦвета",0,0,"вебцвета","WebЦвета<?>"}
},
{0,
{"?НаКлиенте",0,0,"?НаКли[енте]","&НаКлиенте"}
},
{0,
{"?НаСервере",0,0,"?НаСер[вере]","&НаСервере"}
},
{0,
{"?НаСервереБезКонтекста",0,0,"?НаСервереБ[езКонтекста]","&НаСервереБезКонтекста"}
},
{0,
{"?НаКлиентеНаСервереБезКонтекста",0,0,"?НаКлиентеН[аСервереБезКонтекста]","&НаКлиентеНаСервереБезКонтекста"}
},
{0,
{"ANSI",0,0,"ФТЫШ","ANSI<?>"}
},
{0,
{"COMобъект",0,0,"СЩЬо[бъек]","COMобъект<?>"}
},
{0,
{"FTP",0,0,"АЕЗ","FTP<?>"}
},
{0,
{"GET",0,0,"ПУЕ","GET<?>"}
},
{0,
{"HTML",0,0,"РЕЬД","HTML<?>"}
},
{0,
{"HTTP",0,0,"РЕЕЗ","HTTP<?>"}
},
{0,
{"JSON",0,0,"ОЫЩТ","JSON<?>"}
},
{0,
{"OEM",0,0,"ЩУЬ","OEM<?>"}
},
{0,
{"POP3",0,0,"ЗЩЗ3","POP3<?>"}
},
{0,
{"POST",0,0,"ЗЩЫЕ","POST<?>"}
},
{0,
{"SMTP",0,0,"ЫЬЕЗ","SMTP<?>"}
},
{0,
{"URL",0,0,"ГКД","URL<?>"}
},
{0,
{"UTF",0,0,"ГЕА","UTF<?>"}
},
{0,
{"UNIX",0,0,"ГТШЧ","UNIX<?>"}
},
{0,
{"WINDOWS",0,0,"ЦШТВ[ЩЦЫ]","WINDOWS<?>"}
},
{0,
{"XBASE",0,0,"ЧИФЫ[У]","XBASE<?>"}
},
{0,
{"XML",0,0,"ЧЬД","XML<?>"}
}
},
{33,
{"Сокращения",1,0,"",""},
{0,
{"НачалоМесяца",0,0,"НМ","НачалоМесяца(<?>)"}
},
{0,
{"КонецМесяца",0,0,"КМ","КонецМесяца(<?>)"}
},
{0,
{"НачалоДня",0,0,"НД","НачалоДня(<?>)"}
},
{0,
{"КонецДня",0,0,"КД","КонецДня(<?>)"}
},
{0,
{"ТекущаяДата",0,0,"ТД","ТекущаяДата()<?>"}
},
{0,
{"ТекущаяДатаСеанса",0,0,"ТД[С]","ТекущаяДатаСеанса()<?>"}
},
{0,
{"ПериодДействияНачало",0,0,"ПДН","ПериодДействияНачало<?>"}
},
{0,
{"ПериодДействияКонец",0,0,"ПДК","ПериодДействияКонец<?>"}
},
{0,
{"БазовыйПериодНачало",0,0,"БПН","БазовыйПериодНачало<?>"}
},
{0,
{"БазовыйПериодКонец",0,0,"БПК","БазовыйПериодКонец<?>"}
},
{0,
{"ПланыВидовХарактеристик",0,0,"ПВХ","<?"""", ПланВидовХарактеристикПредопределенныеДанные>"}
},
{0,
{"ПланыВидовРасчета",0,0,"ПВР","<?"""", ПланВидовРасчетаПредопределенныеДанные>"}
},
{0,
{"ДобавитьМесяц",0,0,"ДМ","ДобавитьМесяц(<?>,)"}
},
{0,
{"УстановитьПараметр",0,0,"УП","УстановитьПараметр(""<?>"",);"}
},
{0,
{"Контрагент",0,0,"Конт[раген]","Контрагент<?>"}
},
{0,
{"Номенклатура",0,0,"Номен[клатур]","Номенклатура<?>"}
},
{0,
{"Количество",0,0,"Коли[честв]","Количество<?>"}
},
{0,
{"Стоимость",0,0,"Стои[мост]","Стоимость<?>"}
},
{0,
{"УстановитьЗначениеПараметра",0,0,"УЗП","УстановитьЗначениеПараметра(""<?>"",);"}
},
{0,
{"МоментВремени",0,0,"МВ","МоментВремени(<?>)"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"ЗЗ[С]","ЗаполнитьЗначенияСвойств(<?>)"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"зап[олнит]","ЗаполнитьЗначенияСвойств(<?>)"}
},
{0,
{"ЗначениеЗаполнено",0,0,"ЗЗ","ЗначениеЗаполнено(<?>)"}
},
{0,
{"ЗначениеЗаполнено",0,0,"зна","ЗначениеЗаполнено(<?>)"}
},
{0,
{"ЗначениеЗаполнено",0,0,"значениез[аполнен]","ЗначениеЗаполнено(<?>)"}
},
{0,
{"БиблиотекаКартинок",0,0,"БК","БиблиотекаКартинок<?>"}
},
{0,
{"Элементы",0,0,"эл[емен]","элементы<?>"}
},
{0,
{"Видимость = ;",0,0,"Види[мост]","Видимость = истина<?>;"}
},
{0,
{"Доступность = ;",0,0,"Дос[тупност]","Доступность = истина<?>;"}
},
{0,
{"ТолькоПросмотр = ;",0,0,"Толь[коПросмот]","ТолькоПросмотр = истина<?>;"}
},
{0,
{"Объект",0,0,"об[ъек]","Объект<?>"}
},
{0,
{"Истина",0,0,"1=","истина<?>"}
},
{0,
{"Ложь",0,0,"0=","ложь<?>"}
}
},
{9,
{"Диалоговые",1,0,"",""},
{0,
{"НастройкаПериода",0,0,"НастройкаПер[иода=]","НастройкаПериода = новый НастройкаПериода;
НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
НастройкаПериода.РедактироватьКакИнтервал = истина;
НастройкаПериода.РедактироватьКакПериод = истина;
НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;

Если НастройкаПериода.Редактировать() тогда
	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
КонецЕсли;
<?>"}
},
{0,
{"Диалог выбора файла",0,0,"ВыборФайла=","ДиалогВыбораФайла = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
//ДиалогВыбораФайла.Каталог = ""%HOMEPATH%"";
//ДиалогВыбораФайла.ПолноеИмяФайла = """";
ДиалогВыбораФайла.МножественныйВыбор = ложь;
ДиалогВыбораФайла.Заголовок = НСтр(""ru = 'Выбор файла'"");
ДиалогВыбораФайла.Фильтр = ""Текстовые файлы(*.txt)|*.txt|Все файлы (*.*)|*.*"";
ДиалогВыбораФайла.ИндексФильтра = 0;

Если ДиалогВыбораФайла.Выбрать() тогда
	ПеременнаяПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
КонецЕсли;
<?>
"}
},
{4,
{"Вопрос",1,0,"",""},
{0,
{"Асинх Вопрос",0,0,"Вопрос=","Ответ = ждать ВопросАсинх(
    ""<?""Текст вопроса"">"",
    <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">,
    60
);"}
},
{0,
{"Асинх Вопрос",0,0,"Ответ=","Ответ = ждать ВопросАсинх(
    ""<?""Текст вопроса"">"",
    <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">,
    60
);"}
},
{0,
{"Асинх Вопрос с анализом результата",0,0,"Ответ=","Ответ = ждать ВопросАсинх(
    ""<?""Текст вопроса"">"",
	<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">,
	60
);

Если Ответ <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
	
КонецЕсли;"}
},
{0,
{"Асинх Вопрос с анализом результата",0,0,"Воп[ро]","Ответ = ждать ВопросАсинх(
    ""<?""Текст вопроса"">"",
	<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">,
	60
);

Если Ответ <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
	
КонецЕсли;"}
}
},
{4,
{"Вопрос (Устаревшее)",1,0,"",""},
{0,
{"Вопрос",0,0,"Ответ=","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
},
{0,
{"Вопрос",0,0,"ПоказатьВо[прос]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
},
{0,
{"Вопрос с анализом результата",0,0,"Ответ=","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?>
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
		
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Вопрос с анализом результата",0,0,"ПоказатьВо[прос]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?>
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
		
	КонецЕсли;
	
КонецПроцедуры
"}
}
},
{1,
{"Предупреждение",1,0,"",""},
{0,
{"Асинх Предупреждение",0,0,"Пред[упреждени]","ПредупреждениеАсинх(""<?>"",,""Предупреждение"");"}
}
},
{2,
{"Предупреждение (Устаревшее)",1,0,"",""},
{0,
{"Предупреждение",0,0,"ПоказатьПр[едупреждение]","ПоказатьПредупреждение(,<?>);"}
},
{0,
{"Предупреждение c обработкой оповещения",0,0,"ПоказатьПр[едупреждение]","ОписаниеОповещения = новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьПредупреждение(ОписаниеОповещения, <?>, 60);

//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
}
},
{4,
{"НачатьПомещениеФайла",1,0,"",""},
{0,
{"Поместить файл во врем. хранилище Асинх",0,1,"ЗагрузитьФайл[=]","&НаКлиенте
Асинх Процедура ПоместитьФайлВоВремХранКоманда(Команда)
	ПараметрыДиалога = новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Заголовок = ""НачатьПомещениеФайлаНаСервер"";
	ПараметрыДиалога.МножественныйВыбор = Истина;
	ПараметрыДиалога.Фильтр = ""Все файлы|*.*"";
	//НСтр(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	//НСтр(""en = 'Text (*.txt)|*.txt|'; ru = 'текстовый файл (*.txt)|*.txt|'"");
	ПрогрессОбратныйВызов = новый ОписаниеОповещения(""ПрогрессОбратныйВызов"", ЭтотОбъект);
	ПередНачалоОбратныйВызов = новый ОписаниеОповещения(""ПередНачалоОбратныйВызов"", ЭтотОбъект);
	ОписаниеПомещенногоФайла = ждать НачатьПомещениеФайлаНаСервер(ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов, , ПараметрыДиалога);
	Если ОписаниеПомещенногоФайла = неопределено Тогда
		возврат;
	КонецЕсли;
	
	текстСообщения =
	    ""Помещение файла "" + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, ""отменено"", ""выполнено успешно"") +
	    ""Адрес во временном хранилище: "" + ОписаниеПомещенногоФайла.Адрес +
	    ""Имя файла: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя +
	    ""Размер файла, байт: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер();
	Сообщение = новый СообщениеПользователю;
	Сообщение.Текст = НСтр(текстСообщения);
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Состояние(""Файл "" + ПомещаемыйФайл.Имя, Помещено, ""Файл имеет размер "" + ПомещаемыйФайл.Размер() + "" байт"", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Сообщение = новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""Помещаемый файл - "" + ПомещаемыйФайл.Имя + "", размер = "" + ПомещаемыйФайл.Размер());
	Сообщение.Сообщить();
КонецПроцедуры"}
},
{0,
{"Поместить файл во врем. хранилище",0,1,"","&НаКлиенте
Процедура ПоместитьФайлКоманда(Команда)
	ПараметрыДиалога = новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Заголовок = ""НачатьПомещениеФайлаНаСервер"";
	ПараметрыДиалога.МножественныйВыбор = Истина;
	ПараметрыДиалога.Фильтр = ""Все файлы|*.*"";
	//НСтр(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	//НСтр(""en = 'Text (*.txt)|*.txt|'; ru = 'текстовый файл (*.txt)|*.txt|'"");
	ЗавершениеОбратныйВызов = новый ОписаниеОповещения(""ЗавершениеОбратныйВызов"", ЭтотОбъект);
	ПрогрессОбратныйВызов = новый ОписаниеОповещения(""ПрогрессОбратныйВызов"", ЭтотОбъект);
	ПередНачаломОбратныйВызов = новый ОписаниеОповещения(""ПередНачаломОбратныйВызов"", ЭтотОбъект);
	НачатьПомещениеФайлаНаСервер(ЗавершениеОбратныйВызов, ПрогрессОбратныйВызов, ПередНачаломОбратныйВызов, , ПараметрыДиалога);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбратныйВызов(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	Сообщить(""Помещение файла "" + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, ""отменено"", ""выполнено успешно""));
	Сообщить(""Адрес во временном хранилище: "" + ОписаниеПомещенногоФайла.Адрес);
	Сообщить(""Имя файла: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
	Сообщить(""Размер файла, байт: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер());
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Состояние(""Файл "" + ПомещаемыйФайл.Имя, Помещено, ""Файл имеет размер "" + ПомещаемыйФайл.Размер() + "" байт"", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Сообщить(""Помещаемый файл - "" + ПомещаемыйФайл.Имя + "", размер = "" + ПомещаемыйФайл.Размер());
КонецПроцедуры"}
},
{0,
{"ПоместитьФайл",0,0,"ПоместитьФ[айл]","ОписаниеОповещения = новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, УникальныйИдентификатор);

<?>
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
},
{0,
{"ПоместитьФайл",0,0,"НачатьПо[мещениеФайла]","ОписаниеОповещения = новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, УникальныйИдентификатор);

<?>
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
}
},
{4,
{"Открыть форму (упраляемая)",1,0,"",""},
{0,
{"Основная форма нового объекта",0,0,"ОткрытьФормуС[правочника]","ОткрытьФорму(""Справочник.<?"""", ОбъектМетаданных, ""Справочник"">.ОсновнаяФорма"");"}
},
{0,
{"Основная форма новой группы",0,0,"ОткрытьФормуГ[руппы]","ПараметрыФормы = новый Структура(""ЭтоГруппа"", Истина);
ОткрытьФорму(""Справочник.<?"""", ОбъектМетаданных, ""Справочник"">.ФормаГруппы"", Параметры);"}
},
{0,
{"Основная форма списка или выбора",0,0,"ОткрытьФормуС[правочника]","ОткрытьФорму(""Справочник.<?"""", ОбъектМетаданных, ""Справочник"">.<?"""", ВыборВарианта, ""ФормаСписка"", ""ФормаСписка"", ""ФормаВыбора"", ""ФормаВыбора"", ""ФормаВыбораГруппы"", ""ФормаВыбораГруппы"">"");"}
},
{0,
{"Произвольная форма",0,0,"ОткрытьФормуC[правочника]","ОткрытьФорму(""Справочник.<?"""", ОбъектМетаданных, ""Справочник"">.Форма.<?>"");"}
}
},
{3,
{"Сообщение пользователю",1,0,"",""},
{0,
{"Сообщение пользователю",0,0,"Сообщение=","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Сообщить();"}
},
{0,
{"Сообщение пользователю с привязкой к реквизитам",0,0,"Сообщение=","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Поле = """"; //имя реквизита
Сообщение.УстановитьДанные(); //Ссылка на объект ИБ
Сообщение.Сообщить();"}
},
{0,
{"Сообщение пользователю с описанием",0,0,"Сообщение=","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";

//Поле – строка, имя элемента объекта, с которым связывается сообщение:
// Реквизит шапки (проверка заполнения реквизита) – имя реквизита: Сообщение.Поле = «Поставщик»;
// Табличная часть (проверка наличия строк ТЧ) – имя табличной части: Сообщение.Поле = «Товары»;
// Реквизит табличной части – Сообщение.Поле = «Товары[N].Цена», где N – индекс строки (первая = 0)
Сообщение.Поле = """";

//УстановитьДаныне(Объект) – передается объект, реквизиты которого проверяются (например, ЭтотОбъект);
// если проверяется реквизит формы, то метод не вызывается (привязка не нужна), а сообщение должно
// формироваться в обработчике ОбработкаПроверкиЗаполненияНаСервере()
Сообщение.УстановитьДанные(ЭтотОбъект);

//КлючДанных – ссылка на объект, форма которого будет открыта по щелчку на сообщении
//ПутьКДанным – строка, имя основного реквизита формы, который содержит ссылку на КлючДанных
// Если сообщение привязано не к основному реквизиту, тогда не заполняется (достаточно заполнить Поле)
Сообщение.КлючДанных = Объект.Ссылка;
Сообщение.ПутьКДанным = ""Объект"";
Сообщение.Сообщить();
"}
}
}
},
{30,
{"Универсальные коллекции значений",1,0,"",""},
{0,
{"Массив",0,0,"Массив=","Массив = новый Массив(<?>);"}
},
{0,
{"Массив",0,0,"Коллекция=","Массив = новый Массив(<?>);"}
},
{0,
{"Массив (создать и добавить)",0,0,"Массив=","<?""Имя переменной""> = новый Массив;
<?""Имя переменной"">.Добавить(<?>);"}
},
{0,
{"Массив (создать и добавить)",0,0,"Коллекция=","<?""Имя переменной""> = новый Массив;
<?""Имя переменной"">.Добавить(<?>);"}
},
{0,
{"Соответствие",0,0,"Соответствие=","Соответствие = новый Соответствие;
<?>"}
},
{0,
{"Соответствие",0,0,"Коллекция=","Соответствие = новый Соответствие;
<?>"}
},
{0,
{"Соответствие (создать и добавить)",0,0,"Соответствие=","<?""Имя переменной""> = новый Соответствие;
<?""Имя переменной"">.Вставить(<?>, );"}
},
{0,
{"Соответствие (создать и добавить)",0,0,"Коллекция=","<?""Имя переменной""> = новый Соответствие;
<?""Имя переменной"">.Вставить(<?>, );"}
},
{0,
{"Список значений",0,0,"СЗ=","СЗ = новый СписокЗначений;
<?>"}
},
{0,
{"Список значений",0,0,"Коллекция=","СЗ = новый СписокЗначений;
<?>"}
},
{0,
{"Список значений (создать и добавить)",0,0,"СЗ=","<?""Имя переменной""> = новый СписокЗначений;
<?""Имя переменной"">.Добавить(<?>, ""ПРЕДСТАВЛЕНИЕ"", ПОМЕТКА, КАРТИНКА);"}
},
{0,
{"Список значений (создать и добавить)",0,0,"Коллекция=","<?""Имя переменной""> = новый СписокЗначений;
<?""Имя переменной"">.Добавить(<?>, ""ПРЕДСТАВЛЕНИЕ"", ПОМЕТКА, КАРТИНКА);"}
},
{0,
{"Структура",0,0,"Структура=","Структура = новый Структура;
<?>"}
},
{0,
{"Структура",0,0,"Коллекция=","Структура = новый Структура;
<?>"}
},
{0,
{"Структура (создать и добавить)",0,0,"Структура=","<?""Имя переменной""> = новый Структура;
<?""Имя переменной"">.Вставить(""<?>"", );"}
},
{0,
{"Структура (создать и добавить)",0,0,"Коллекция=","<?""Имя переменной""> = новый Структура;
<?""Имя переменной"">.Вставить(""<?>"", );"}
},
{0,
{"Структура (создать конструктором)",0,0,"Структура=","<?""Имя переменной""> = новый Структура(""<?>"", );"}
},
{0,
{"Структура (создать конструктором)",0,0,"Коллекция=","<?""Имя переменной""> = новый Структура(""<?>"", );"}
},
{0,
{"Структура (проверка свойства)",0,0,"СтруктураСо[держит]","<?""Имя структуры"">.Свойство(""КЛЮЧ"", ИСКОМОЕ_ЗНАЧЕНИЕ)<?>"}
},
{0,
{"Структура (проверка свойства)",0,0,"СтрукСо[держит]","<?""Имя структуры"">.Свойство(""КЛЮЧ"", ИСКОМОЕ_ЗНАЧЕНИЕ)<?>"}
},
{0,
{"ТаблицаЗначений",0,0,"ТЗ=","ТЗ = новый ТаблицаЗначений;
<?>"}
},
{0,
{"ТаблицаЗначений",0,0,"Коллекция=","ТЗ = новый ТаблицаЗначений;
<?>"}
},
{0,
{"ТЗ (создать и добавить колонку)",0,0,"ТЗ=","<?""Имя переменной""> = новый ТаблицаЗначений;
<?""Имя переменной"">.Колонки.Добавить(""<?>"", );"}
},
{0,
{"ТЗ (создать и добавить колонку)",0,0,"Коллекция=","<?""Имя переменной""> = новый ТаблицаЗначений;
<?""Имя переменной"">.Колонки.Добавить(""<?>"", );"}
},
{0,
{"ДеревоЗначений",0,0,"Дерево=","ДеревоЗначений = новый ДеревоЗначений;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"ДеревоЗначений=","ДеревоЗначений = новый ДеревоЗначений;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"Коллекция=","ДеревоЗначений = новый ДеревоЗначений;
<?>"}
},
{0,
{"Коллекция содержит",0,0,"КоллекцияСод[ержит]","Если КОЛЛЕКЦИЯ.Найти(<?>) <> неопределено тогда
	
КонецЕсли;"}
},
{0,
{"Коллекция содержит",0,0,"СодержитЭ[лемент]","Если КОЛЛЕКЦИЯ.Найти(<?>) <> неопределено тогда
	
КонецЕсли;"}
},
{0,
{"Коллекция содержит набор полей",0,0,"КоллекцияСод[ержит]","Функция КоллекцияСодержитЗначенияПолей(коллекция, наборПолей)
	
	содержит = истина;
	
	попытка
		
		Для каждого элемент из коллекция Цикл
			
			Для каждого поле из наборПолей Цикл
				содержит = содержит И (коллекция[поле.Ключ] = поле.Значение);
			КонецЦикла;
			
			Если содержит тогда прервать; КонецЕсли;
			
		КонецЦикла;
		
	исключение
		
		содержит = ложь;
		
	конецПопытки;
	
КонецФункции"}
}
},
{2,
{"Общие объекты",1,0,"",""},
{6,
{"Табличный документ",1,0,"",""},
{0,
{"ТабДок (создать новый)",0,0,"ТабДок=","ТабДок = новый ТабличныйДокумент;
<?>"}
},
{0,
{"ТабДок (шаблон отчета)",0,0,"ТабДок=","ТабДок = новый ТабличныйДокумент;
ТабДок.ОтображатьГруппировки = Истина;
ТабДок.ОтображатьЗаголовки = Ложь;
ТабДок.ОтображатьСетку = Ложь;
ТабДок.ТолькоПросмотр = Истина;
ТабДок.Защита = Ложь;

<?>

ТабДок.Показать(""<Заголовок>"");"}
},
{0,
{"Область табличного документа",0,0,"Обл=","Обл<?""Имя области""> = <?>.ПолучитьОбласть(""<?""Имя области"">"");"}
},
{0,
{"Область табличного документа с выводом",0,0,"Обл=","Обл<?""Имя области""> = ТабДок.ПолучитьОбласть(""<?""Имя области"">"");
Обл<?""Имя области"">.Параметры.<ИмяПараметра> = <ЗначениеПараметра>;
ТабДок.Вывести(Обл<?""Имя области"">);
<?>"}
},
{0,
{"ПолучитьМакет",0,0,"Макет=","Макет = ПолучитьМакет(""<?""Название макета"">"");"}
},
{0,
{"ПолучитьОбщийМакет",0,0,"Макет=","Макет = ПолучитьОбщийМакет(""<?""Название макета"">"");"}
}
},
{4,
{"Блокировки",1,0,"",""},
{0,
{"Блокировка РегистрНакопления",0,0,"Блокир[овка=]","Блокировка = новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрНакопления>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать();"}
},
{0,
{"Блокировка РегистрБухгалтерии",0,0,"Блокир[овка=]","Блокировка = новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрБухгалтерии.<?"""", РегистрБухгалтерии>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.УстановитьЗначение(""Период"", Новый Диапазон( , ));
//ЭлементБлокировки.УстановитьЗначение(""Счет"", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрСведений",0,0,"Блокир[овка=]","Блокировка = новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрСведений.<?"""", РегистрСведений>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрРасчета",0,0,"Блокир[овка=]","Блокировка = новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрРасчета.<?"""", РегистрРасчета>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
}
}
},
{10,
{"Прикладные объекты",1,0,"",""},
{0,
{"Перечисление (тип)",0,0,"Пер[ечисления]","Перечисления.<?"""", Перечисление><?>"}
},
{0,
{"Перечисление (значение)",0,0,"Перечисления","Перечисления.<?"""", ЗначениеПеречисления><?>"}
},
{0,
{"ВыборСчетаДт",0,0,"СчетДт=","СчетДт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"ВыборСчетаКт",0,0,"СчетКт=","СчетКт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"Движение",0,0,"Движение=","Движение = Движения<?>
Движение.Период = Дата;"}
},
{0,
{"СубконтоДт",0,0,"СубконтоДт","СубконтоДт[<?"""", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"СубконтоКт",0,0,"СубконтоКт","СубконтоКт[<?"""", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"Граница",0,0,"Граница=","Граница = новый Граница(<?>, <?"""", ВыборВарианта, ""ВидГраницы.Включая"", ""ВидГраницы.Включая"", ""ВидГраницы.Исключая"", ""ВидГраницы.Исключая"">);"}
},
{2,
{"ВидДвижения",1,0,"",""},
{0,
{"РегистрыНакопления",0,0,"ВидД[вижения=]","ВидДвижения = <?"""", ВыборВарианта, ""Приход"", ""ВидДвиженияНакопления.Приход"", ""Расход"", ""ВидДвиженияНакопления.Расход"">;"}
},
{0,
{"РегистрыБухгалтерии",0,0,"ВидД[вижения=]","ВидДвижения = <?"""", ВыборВарианта, ""Дебет"", ""ВидДвиженияБухгалтерии.Дебет"", ""Кредит"", ""ВидДвиженияБухгалтерии.Кредит"">;"}
}
},
{5,
{"Записи регистров",1,0,"",""},
{0,
{"РегистрСведений",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();"}
},
{0,
{"РегистрНакопления",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"РегистрБухгалтерии",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"РегистрРасчета",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"ЗаписьРегистраРасчетов",0,0,"Запись=","Запись = Движения.<?"""", РегистрРасчета>.Добавить();
Запись.ПериодРегистрации = Дата;
Запись.ПериодДействияНачало = ;
Запись.ПериодДействияКонец = ;
Запись.Сторно = Ложь;
Запись.Сотрудник = ;
Запись.Подразделение = ;
Запись.График = ;
Запись.Параметр = ;
Запись.БазовыйПериодНачало = ;
Запись.БазовыйПериодКонец = ;"}
}
}
},
{8,
{"Расширения",1,0,"",""},
{0,
{"#Вставка (расширения)",0,0,"#Вста[вк]","#Вставка

<?>

#КонецВставки"}
},
{0,
{"#Вставка (расширения)",0,0,"№Вста[вк]","#Вставка

<?>

#КонецВставки"}
},
{0,
{"#Удаление (расширения)",0,0,"#Удал[ени]","#Удаление

<?>

#КонецУдаления"}
},
{0,
{"#Удаление (расширения)",0,0,"№Удал[ени]","#Удаление

<?>

#КонецУдаления"}
},
{0,
{"Расширение #Вставка",0,0,"Расш[ирени]","#Вставка

<?>

#КонецВставки"}
},
{0,
{"Расширение #Удаление",0,0,"Расш[ирени]","#Удаление

<?>

#КонецУдаления"}
},
{5,
{"Процедура",1,0,"",""},
{0,
{"Расширение &Перед",0,0,"ПередП[роцедурой]","&Перед(""<?""Имя процедуры"">"")
Процедура <?""Имя процедуры"">()
	
	<?>
	
КонецПроцедуры"}
},
{0,
{"Расширение &После",0,0,"ПослеП[роцедуры]","&После(""<?""Имя процедуры"">"")
Процедура <?""Имя процедуры"">()
	
	<?>
	
КонецПроцедуры"}
},
{0,
{"Расширение &Вместо",0,0,"ВместоП[роцедуры]","&Вместо(""<?""Имя процедуры"">"")
Процедура <?""Имя процедуры"">()
	
	<?>
	//ПродолжитьВызов();
	
КонецПроцедуры"}
},
{0,
{"Расширение &ИзменениеИКонтроль",0,0,"ИзменениеИКонтрольП[роцедуры]","&ИзменениеИКонтроль(""<?""Имя процедуры"">"")
Процедура ПРЕФИКС_<?""Имя процедуры"">()
	
	<?>
	
КонецПроцедуры"}
},
{0,
{"Расширение Процедуры",0,0,"Расш[ирение]","<?""Вариант расширения"", ВыборВарианта, ""Перед"", ""&Перед"", ""После"", ""&После"", ""Вместо"", ""&Вместо"", ""Изменение и контроль"", ""&ИзменениеИКонтроль"">(""<?""Имя процедуры"">"")
Процедура ПРЕФИКС_<?""Имя процедуры"">()
	
	<?>
	//ПродолжитьВызов(); (для &Вместо)
	
КонецПроцедуры"}
}
},
{5,
{"Функция",1,0,"",""},
{0,
{"Расширение &Перед",0,0,"ПередФ[ункцией]","&Перед(""<?""Имя функции"">"")
Функция <?""Имя Функции"">()
	
	<?>
	Возврат Неопределено;
	
Конецфункции"}
},
{0,
{"Расширение &После",0,0,"ПослеФ[ункции]","&После(""<?""Имя функции"">"")
Функция <?""Имя функции"">()
	
	<?>
	Возврат Неопределено;
	
Конецфункции"}
},
{0,
{"Расширение &Вместо",0,0,"ВместоФ[ункции]","&Вместо(""<?""Имя функции"">"")
Функция <?""Имя функции"">()
	
	<?>
	Возврат ПродолжитьВызов();
	
Конецфункции"}
},
{0,
{"Расширение &ИзменениеИКонтроль",0,0,"ИзменениеИКонтрольФ[ункции]","&ИзменениеИКонтроль(""<?""Имя функции"">"")
Функция ПРЕФИКС_<?""Имя функции"">()
	
	<?>
	Возврат Неопределено;
	
Конецфункции"}
},
{0,
{"Расширение Функции",0,0,"Расш[ирение]","<?""Вариант расширения"", ВыборВарианта, ""Перед"", ""&Перед"", ""После"", ""&После"", ""Вместо"", ""&Вместо"", ""Изменение и контроль"", ""&ИзменениеИКонтроль"">(""<?""Имя функции"">"")
Функция ПРЕФИКС_<?""Имя функции"">()
	
	<?>
	Возврат Неопределено; //Возврат ПродолжитьВызов(); (для &Вместо)
	
Конецфункции"}
}
}
},
{1,
{"Асинхронные вызовы",1,0,"",""},
{7,
{"Оповещение и обещание",1,0,"",""},
{0,
{"Описание оповещения",0,0,"ОписаниеО[повещени]","ОписаниеОповещения = новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект);
<?>"}
},
{0,
{"Описание оповещения",0,0,"Оповещ[ение]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект);
<?>"}
},
{0,
{"Описание оповещения с обработчиком ошибки",0,0,"ОписаниеО[повещени]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект, ,""<?""Имя процедуры"">ОбработкаОшибки"", ЭтотОбъект);
<?>"}
},
{0,
{"Описание оповещения с обработчиком ошибки",0,0,"Оповещ[ение]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект, ,""<?""Имя процедуры"">ОбработкаОшибки"", ЭтотОбъект);
<?>"}
},
{0,
{"Описание оповещения с обработчиком ошибки (с описанем обработчика)",0,0,"ОписаниеО[повещени]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект, ,""<?""Имя процедуры"">ОбработкаОшибки"", ЭтотОбъект);

//==========Вынести в отдельную процедуру========
//
//Список аргументов зависит от контекста вызова!
//&НаКлиенте
//Процедура <?""Имя процедуры"">(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура <?""Имя процедуры"">ОбработкаОшибки(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры"}
},
{0,
{"Описание оповещения с обработчиком ошибки (с описанем обработчика)",0,0,"Оповещ[ение]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры"">"", ЭтотОбъект, ,""<?""Имя процедуры"">ОбработкаОшибки"", ЭтотОбъект);

//==========Вынести в отдельную процедуру========
//
//Список аргументов зависит от контекста вызова!
//&НаКлиенте
//Процедура <?""Имя процедуры"">(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура <?""Имя процедуры"">ОбработкаОшибки(ДополнительныеПараметры) Экспорт
//	
//КонецПроцедуры"}
},
{0,
{"Обещание",0,0,"Обещ[ани]","Обещание = ждать <?>;"}
}
}
},
{6,
{"Полезняшки",1,0,"",""},
{7,
{"Формы",1,0,"",""},
{0,
{"Добавить реквизит формы",0,0,"","Процедура ДобавитьРеквизитФормы(ЭтаФорма, ИмяРеквизита, ТипРеквизита, Путь = """", Заголовок = """", СохраняемыеДанные = Ложь) Экспорт
	
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, Путь, Заголовок, СохраняемыеДанные);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры
"}
},
{0,
{"Добавить команду формы",0,0,"","Функция ДобавитьКомандуФормы(ЭтаФорма, ИмяКоманды, Действие, Заголовок) Экспорт
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = Действие;
	Команда.Заголовок = Заголовок;
	
	Возврат Команда;
	
КонецФункции
"}
},
{0,
{"Добавить элемент - кнопка формы",0,0,"","Функция ДобавитьКнопкуНаФорму(Элементы, Имя, ГруппаРодитель = Неопределено, ПередЭлементом = Неопределено, ИмяКоманды = """") Экспорт
	
	Если ПередЭлементом = Неопределено Тогда
		НовыйЭлемент = Элементы.Добавить(Имя, Тип(""КнопкаФормы""), ГруппаРодитель);
	Иначе
		НовыйЭлемент = Элементы.Вставить(Имя, Тип(""КнопкаФормы""), ГруппаРодитель, ПередЭлементом);
	КонецЕсли;
	
	НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка; // Гиперссылка, КнопкаКоманднойПанели, ГиперссылкаКоманднойПанели
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	
	Возврат НовыйЭлемент;
	
КонецФункции
"}
},
{0,
{"Добавить элемент - группа формы",0,0,"","Функция ДобавитьГруппуНаФорму(Элементы, Имя, ГруппаРодитель = Неопределено, ПередЭлементом = Неопределено) Экспорт
	
	Если ПередЭлементом = Неопределено Тогда
		НовыйЭлемент = Элементы.Добавить(Имя, Тип(""ГруппаФормы""), ГруппаРодитель);
	Иначе
		НовыйЭлемент = Элементы.Вставить(Имя, Тип(""ГруппаФормы""), ГруппаРодитель, ПередЭлементом);
	КонецЕсли;
	
	НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКнопок; // ГруппаКолонок, КоманднаяПанель, КонтекстноеМеню, ОбычнаяГруппа, Подменю, Страница, Страницы
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная; // Вертикальная, ГоризонтальнаяЕслиВозможно, ГоризонтальнаяВсегда
	
	Возврат НовыйЭлемент;
	
КонецФункции
"}
},
{0,
{"Добавить элемент - поле формы",0,0,"","Функция ДобавитьПолеНаФорму(Элементы, Имя, ГруппаРодитель = Неопределено, ПередЭлементом = Неопределено, ПутьКДанным = """") Экспорт
	
	Если ПередЭлементом = Неопределено Тогда
		НовыйЭлемент = Элементы.Add(Имя, Type(""ПолеФормы""), ГруппаРодитель);
	Иначе
		НовыйЭлемент = Элементы.Insert(Имя, Type(""ПолеФормы""), ГруппаРодитель, ПередЭлементом);
	КонецЕсли;
	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; // ПолеИндикатора, ПолеКартинки, ПолеНадписи, ПолеПереключателя, ПолеФлажка
	НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	
	Возврат НовыйЭлемент;
	
КонецФункции
"}
},
{0,
{"Добавить элемент - декорация формы",0,0,"","Функция ДобавитьДекорациюНаФорму(Элементы, Имя, ГруппаРодитель = Неопределено, ПередЭлементом = Неопределено) Экспорт
	Если ПередЭлементом = Неопределено Тогда
		Элемент = Элементы.Добавить(Имя, Тип(""ДекорацияФормы""), ГруппаРодитель);
	Иначе
		Элемент = Элементы.Вставить(Имя, Тип(""ДекорацияФормы""), ГруппаРодитель, ПередЭлементом);
	КонецЕсли;
	
	Элемент.Вид = ВидДекорацииФормы.Надпись; // Картинка
	
	//Если ТипЭлемента = Тип(""ТаблицаФормы"") Тогда
	//	Элемент.ПутьКДанным = ДопСвойства.ПутьКДанным; // Строка
	//КонецЕсли;
	
	возврат Элемент;
КонецФункции
"}
},
{0,
{"Добавить элемент - таблица формы",0,0,"","Функция ДобавитьТаблицуНаФорму(Элементы, Имя, ГруппаРодитель = неопределено, ПередЭлементом = неопределено, ПутьКДанным = """") Экспорт
	Если ПередЭлементом = неопределено Тогда
		Элемент = Элементы.Добавить(Имя, Тип(""ТаблицаФормы""), ГруппаРодитель);
	Иначе
		Элемент = Элементы.Вставить(Имя, Тип(""ТаблицаФормы""), ГруппаРодитель, ПередЭлементом);
	КонецЕсли;
	
	Элемент.ПутьКДанным = ПутьКДанным;
	возврат Элемент;
КонецФункции
"}
}
},
{0,
{"Загрузка данных из Excel Асинх",0,0,"","&НаКлиенте
Асинх Процедура ПоместитьФайлКоманда(Команда)
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Заголовок = ""НачатьПомещениеФайлаНаСервер"";
	ПараметрыДиалога.МножественныйВыбор = Истина;
	ПараметрыДиалога.Фильтр = НСтр(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	ПрогрессОбратныйВызов = Новый ОписаниеОповещения(""ПрогрессОбратныйВызов"", ЭтотОбъект);
	ПередНачаломОбратныйВызов = Новый ОписаниеОповещения(""ПередНачаломОбратныйВызов"", ЭтотОбъект);
	ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(ПрогрессОбратныйВызов, ПередНачаломОбратныйВызов, , ПараметрыДиалога);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить(""Помещение файла "" + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, ""отменено"", ""выполнено успешно""));
	Сообщить(""Адрес во временном хранилище: "" + ОписаниеПомещенногоФайла.Адрес);
	Сообщить(""Имя файла: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
	Сообщить(""Размер файла, байт: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер());
	
	ОбработатьЗагруженныйФайл(ОписаниеПомещенногоФайла.Адрес);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗагруженныйФайл(Адрес)
	
	ФайлНаДиске = ПолучитьИмяВременногоФайла(""xlsx"");
	ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
	ДанныеФайла.Записать(ФайлНаДиске);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ФайлНаДиске, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область(""Лист1"")); // Здесь Лист1 - название листа экселя.
	ПостроительЗапроса.Выполнить();
	// В файле первой строчкой должны идти названия колонок. Если этого не будет, то построитель не вернет ТЗ, т.к. не будут заданы имена колонок.
	// Также нужно смотреть на типы ячеек файла. Типизация нормально отрабатывает, если заданы соответствующие типы. Иначе ""10.08.2017"" в экселе - это строка, а не дата.
	СтрокиТЗ = ПостроительЗапроса.Результат.Выгрузить(); // Выполняем запрос к источнику данных, автоматически выбирая все поля и получаем таблицу значений
	
	Для каждого СтрокаТЗ Из СтрокиТЗ Цикл
		// Полученные данные
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Состояние(""Файл "" + ПомещаемыйФайл.Имя, Помещено, ""Файл имеет размер "" + ПомещаемыйФайл.Размер() + "" байт"", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	Сообщить(""Помещаемый файл - "" + ПомещаемыйФайл.Имя + "", размер = "" + ПомещаемыйФайл.Размер());
КонецПроцедуры
"}
},
{0,
{"Открыть форму записи РС (вариант 1)",0,0,"","&НаКлиенте
Процедура ОткрытьФормуЗаписи(ПараметрыЗаписи)
	
	Измерения = Новый Структура;
	<?"""", ВыборВарианта, ""Периодический"", ""Измерения.Вставить(\""Период\"", ПараметрыЗаписи.Период);"", ""Не периодический"", """">
	Измерения.Вставить(""Измерение1"", ПараметрыЗаписи.Измерение1);

	ПараметрыКлюча = Новый Массив;
	ПараметрыКлюча.Добавить(Измерения);

	КлючЗаписи = Новый(""РегистрСведенийКлючЗаписи.<?""Вид регистра"", ОбъектМетаданных, ""РегистрСведений"">"", ПараметрыКлюча);
	Отбор = Новый Структура(""Ключ"", КлючЗаписи);
	ОткрытьФорму(""РегистрСведений.<?""Вид регистра"", ОбъектМетаданных, ""РегистрСведений"">.ФормаЗаписи"", Отбор);
	
КонецПроцедуры
"}
},
{0,
{"Открыть форму записи РС (вариант 2)",0,0,"","&НаКлиенте
Процедура ОткрытьФормуЗаписи(ПараметрыЗаписи)
	
	Отбор = Новый Структура(""Ключ"", ПолучитьКлючЗаписи(ПараметрыЗаписи));
	ОткрытьФорму(""РегистрСведений.<?""Вид регистра"", ОбъектМетаданных, ""РегистрСведений"">.ФормаЗаписи"", Отбор);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписи(ПараметрыЗаписи)
	
	ПараметрыКлюча = Новый Структура;
	<?"""", ВыборВарианта, ""Периодический"", ""Измерения.Вставить(\""Период\"", ПараметрыЗаписи.Период);"", ""Не периодический"", """">
	Измерения.Вставить(""Измерение1"", ПараметрыЗаписи.Измерение1);
	
	Возврат РегистрыСведений.<?""Вид регистра"", ОбъектМетаданных, ""РегистрСведений"">.СоздатьКлючЗаписи(ПараметрыКлюча);
	
КонецФункции
"}
},
{0,
{"HTML шаблон",0,0,"шаблонHTML",""}
},
{0,
{"HTML шаблон в строковом литерале",0,0,"шаблонHTML",""}
}
},
{9,
{"HTTP сервисы",1,0,"",""},
{0,
{"HTTP соединение",0,0,"http=","ИмяСервера = """";
ПортПодключения = 1;
ИмяПользователя = """";
Пароль = """";

HTTPСоединение = новый HTTPСоединение(ИмяСервера, ПортПодключения, ИмяПользователя, Пароль);"}
},
{0,
{"HTTP соединение защищенное Windows",0,0,"http=","ИмяСервера = """";
ПортПодключения = 1;
ИмяПользователя = """";
Пароль = """";
Таймаут = 5;

OpenSSL = новый ЗащищенноеСоединениеOpenSSL(
	новый СертификатКлиентаWindows(), //СпособВыбораСертификатаWindows.Выбирать,
	новый СертификатыУдостоверяющихЦентровWindows());

HTTPСоединение = новый HTTPСоединение(ИмяСервера, ПортПодключения, ИмяПользователя, Пароль, , Таймаут, OpenSSL);"}
},
{0,
{"HTTP запрос",0,0,"http=","ИмяИБ = ""?"";
ИмяСервиса = ""?"";
КомандаСервиса = ""?"";
АдресРесурса = СтрШаблон(""%1/hs/%2/%3"", ИмяИБ, ИмяСервиса, КомандаСервиса);

<?""Использовать параметры"", ВыборВарианта, ""С параметрами"", ""ДобавитьПараметрыКАдресуРесурса(АдресРесурса, ПараметрыЗаголовка);"", ""Без параметров"", """">

HTTPЗапрос  = новый HTTPЗапрос(АдресРесурса);
HTTPЗапрос.Заголовки.Вставить(""Content-Type"", ""application/json; charset=utf-8"");
//HTTPЗапрос.УстановитьТелоИзСтроки(""?"", ""UTF-8"", ИспользованиеByteOrderMark.НеИспользовать); // для PUT и POST

HTTPОтвет = HTTPСоединение.<?""Метод запроса"", ВыборВарианта, ""GET"", ""Получить"", ""PUT"", ""Записать"", ""POST"", ""ОтправитьДляОбработки"", ""DELETE"", ""Удалить"">(HTTPЗапрос);"}
},
{0,
{"HTTP ответ",0,0,"http=","Если HTTPОтвет.КодСостояния >= 200 И HTTPОтвет.КодСостояния < 300 Тогда // успех
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку(""UTF-8"");
КонецЕсли;"}
},
{0,
{"Добавить параметры к строке адреса",0,0,"","Процедура ДобавитьПараметрыКАдресуРесурса(СтрокаЗапроса, СтруктураПараметров)
	
	Если ТипЗнч(СтруктураПараметров) = Тип(""Структура"") И СтруктураПараметров.Количество() > 0 Тогда
		СтрокаЗапроса = СтрокаЗапроса + ""?"";
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭтоПервыйПараметр = Истина;
	
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		
		name = НРег(КлючИЗначение.Ключ);
		value = КлючИЗначение.Значение;
		
		Если ТипЗнч(value) = Тип(""Дата"") Тогда
			value = Формат(value, ""ДФ=""""ггггММддччммсс"""""");
		ИначеЕсли ТипЗнч(value) = Тип(""Число"") Тогда
			value = Строка(value);
			value = СтрЗаменить(value, Символы.НПП, """");
		ИначеЕсли ТипЗнч(value) = Тип(""Булево"") Тогда
			value = ?(value, ""true"", ""false"");
		КонецЕсли;
		
		СтрокаЗапроса = СтрокаЗапроса + ?(ЭтоПервыйПараметр, """", ""&"") + НРег(name) + ""="" + value;
		ЭтоПервыйПараметр = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры
"}
},
{0,
{"HTTP входящий запрос - параметр URL",0,0,"http=","<?""Имя переменной""> = ВходящийHTTPЗапрос.ПараметрыURL[""<?>""];"}
},
{0,
{"HTTP входящий запрос - параметр запроса",0,0,"http=","<?""Имя переменной""> = ВходящийHTTPЗапрос.ПараметрыЗапроса.Получить(""<?>"");"}
},
{0,
{"HTTP входящий запрос - перебор параметров запроса",0,0,"http=","Для Каждого КлючИЗначение Из ВходящийHTTPЗапрос.ПараметрыЗапроса Цикл
	
	name = КлючИЗначение.Ключ;
	value = КлючИЗначение.Значение;
	<?>
	
КонецЦикла;"}
},
{0,
{"HTTP входящий запрос - параметр из тела запроса",0,0,"http=","<?""Имя переменной""> = ВходящийHTTPЗапрос.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);"}
}
},
{4,
{"СКД - альфа версия",1,0,"",""},
{6,
{"НаборыДанных",1,0,"",""},
{0,
{"СхемаКомпоновки",0,0,"СКД=","СхемаКомпоновки = Новый СхемаКомпоновкиДанных;"}
},
{0,
{"ИсточникДанныхСКД",0,0,"Источник[ДанныхСКД]=","ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
ИсточникДанных.Имя = ""local"";
ИсточникДанных.ТипИсточникаДанных = ""local"";
"}
},
{0,
{"Набор данных Запрос",0,0,"НаборД[анных=]","НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип(""НаборДанныхЗапросСхемыКомпоновкиДанных""));
НаборДанных.Имя = ""НаборДанных1"";
НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
НаборДанных.Запрос = <?>;
"}
},
{0,
{"Набор данных Объект",0,0,"НаборД[анных=]","НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип(""НаборДанныхОбъектСхемыКомпоновкиДанных""));
НаборДанных.Имя = ""НаборДанных1"";
НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
НаборДанных.ИмяОбъекта = <?>;
"}
},
{0,
{"Набор данных Объединение",0,0,"НаборД[анных=]","НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип(""НаборДанныхОбъединениеСхемыКомпоновкиДанных""));
НаборДанных.Имя = ""НаборДанных1"";
НаборДанных.Элементы = <?>;
"}
},
{0,
{"ПолеСКД",0,0,"ПолеСКД=","ПолеСКД = НаборДанных.Поля.Добавить(Тип(""ПолеНабораДанныхСхемыКомпоновкиДанных""));
ПолеСКД.Поле = ""<?>"";
ПолеСКД.ПутьКДанным = ""<?>"";
ПолеСКД.Роль.Измерение = Истина;
"}
}
},
{1,
{"Ресурсы",1,0,"",""},
{0,
{"РесурсСКД",0,0,"РесурсСКД=","РесурсСКД = СхемаКомпоновки.ПоляИтога.Добавить();
РесурсСКД.ПутьКДанным = ""<?>""; 
РесурсСКД.Выражение = ""Сумма(<?>)"";"}
}
},
{1,
{"Параметры",1,0,"",""},
{0,
{"ПараметрСКД",0,0,"ПараметрСКД=","ПараметрСКД = СхемаКомпоновки.Параметры.Добавить(); //Разные параметры надо описывать разными переменными!
ПараметрСКД.Имя = <?""Имя параметра"">;
ПараметрСКД.Заголовок = <?""Имя параметра"">;
ПараметрСКД.ТипЗначения = <?""Конструктор описания типов"", КонструкторОписанияТипов>;
ПараметрСКД.ВключатьВДоступныеПоля = Истина;
ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
"}
}
},
{10,
{"Настройки",1,0,"",""},
{0,
{"НастройкиСКД Новый вариант",0,0,"НастройкиСКД=","НастройкиСКД = СхемаКомпоновки.ВариантыНастроек.Добавить();"}
},
{0,
{"НастройкиСКД Настройки по умолчанию",0,0,"НастройкиСКД=","НастройкиСКД = СхемаКомпоновки.НастройкиПоУмолчанию;
"}
},
{0,
{"ГруппировкаСКД - новая группировка в корень",0,0,"ГруппировкаСКД=","ГруппировкаСКД = НастройкиСКД.Структура.Добавить(Тип(""<?"""", ВыборВарианта, ""Группировка"", ""ГруппировкаКомпоновкиДанных"", ""Таблица"", ""ТаблицаКомпоновкиДанных"">""));
ГруппировкаСКД.Использование = Истина;
ПолеГруппировки = ГруппировкаСКД.ПоляГруппировки.Элементы.Добавить(Тип(""ПолеГруппировкиКомпоновкиДанных""));
ПолеГруппировки.Использование = Истина;
ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(""<?""Введите имя поля"">"");
"}
},
{0,
{"ГруппировкаСКД - вложенная группировка",0,0,"ГруппировкаСКД=","ГруппировкаСКД = ГруппировкаСКД.Структура.Добавить(Тип(""<?"""", ВыборВарианта, ""Группировка"", ""ГруппировкаКомпоновкиДанных"", ""Таблица"", ""ТаблицаКомпоновкиДанных"">""));
ГруппировкаСКД.Использование = Истина;
ПолеГруппировки = ГруппировкаСКД.ПоляГруппировки.Элементы.Добавить(Тип(""ПолеГруппировкиКомпоновкиДанных""));
ПолеГруппировки.Использование = Истина;
ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(""<?""Введите имя поля"">"");
"}
},
{0,
{"ВыбранноеПолеСКД - АвтоПоле",0,0,"ВыбранноеПолеСКД=","ВыбранноеПолеСКД = ГруппировкаСКД.Выбор.Элементы.Добавить(Тип(""АвтоВыбранноеПолеКомпоновкиДанных""));
ВыбранноеПолеСКД.Использование = Истина;
"}
},
{0,
{"ВыбранноеПолеСКД - Произольное поле",0,0,"ВыбранноеПолеСКД=","ВыбранноеПолеСКД = ГруппировкаСКД.Выбор.Элементы.Добавить(Новый ПолеКомпоновкиДанных(""<?""Введите имя поля"">""));
ВыбранноеПолеСКД.Использование = Истина;
"}
},
{0,
{"ПолеСортировкиСКД - Авто",0,0,"ПолеСортировкиСКД=","ПолеСортировки = НастройкиСКД.Порядок.Элементы.Добавить(Тип(""АвтоЭлементПорядкаКомпоновкиДанных""));
ПолеСортировки.Использование = Истина;
"}
},
{0,
{"ПолеСортировкиСКД - Произольное поле",0,0,"ПолеСортировкиСКД=","ПолеСортировки = НастройкиСКД.Порядок.Элементы.Добавить(Новый ПолеКомпоновкиДанных(""<?""Введите имя поля"">""));
ПолеСортировки.Использование = Истина;
"}
},
{0,
{"ЗначениеПараметраСКД",0,0,"","ЗначениеПараметраСКД = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
ЗначениеПараметраСКД.Использование = Истина;
ЗначениеПараметраСКД.Параметр = Новый ПараметрКомпоновкиДанных(""<?""Имя параметра"">"");
ЗначениеПараметраСКД.Значение = <?""Значение параметра"">;"}
},
{0,
{"ОтборСКД",0,0,"","ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
ЭлементОтбора.Использование = Истина;
ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""<?""Введите имя отбора"">"");
ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.ПравоеЗначение = <?""Укажите значение отбора"">;
"}
}
}
}
},
{16,
{"EN",1,0,"",""},
{16,
{"Key words",1,0,"",""},
{0,
{"If else",0,0,"if=","If <?> then
	
EndIf;"}
},
{0,
{"If + Else",0,0,"Ifel[se]","If <?> then
	
Else
	
EndIf;"}
},
{0,
{"ElsIf",0,0,"elif","ElsIf <?> then
	"}
},
{0,
{"ElsIf",0,0,"elsi","ElsIf <?> then
	"}
},
{0,
{"While",0,0,"Whil","While <?> do
	
EndDo;"}
},
{0,
{"For Each",0,0,"Fore[ach]","For each element in collection do
	<?>
EndDo;"}
},
{0,
{"For",0,0,"For=","For i = 0 to collection.Count() do
	<?>
EndDo;"}
},
{0,
{"Try",0,0,"Try","Try
	<?>
Except
	//ErrorDescription()
EndTry;"}
},
{0,
{"Transaction",0,0,"Trans[actio]","BeginTransaction();

Try
	
	<?>
	CommitTransaction();
	
Except
	
	RollbackTransaction();
	WriteLogEvent(NStr(""en = 'Execute operation'""),
		EventLogLevel.Error,,,
		DetailErrorDescription(ErrorInfo()));
	
EndTry;"}
},
{0,
{"Transaction",0,0,"BeginTr[ansaction]","BeginTransaction();

Try
	
	<?>
	CommitTransaction();
	
Except
	
	RollbackTransaction();
	WriteLogEvent(NStr(""en = 'Execute operation'""),
		EventLogLevel.Error,,,
		DetailErrorDescription(ErrorInfo()));
	
EndTry;"}
},
{0,
{"True",0,0,"tru","true<?>"}
},
{0,
{"False",0,0,"fal[s]","false<?>"}
},
{0,
{"Return",0,0,"Ret[ur]","return <?>;"}
},
{0,
{"Continue",0,0,"cont[inu]","continue<?>"}
},
{0,
{"Break",0,0,"bre[a]","break<?>"}
},
{0,
{"Export",0,0,"Exp[ort]","export<?>"}
}
},
{2,
{"Comments and regions",1,0,"",""},
{6,
{"Region",1,0,"",""},
{0,
{"Region",0,0,"Regi[o]","#Region <?>

#EndRegion"}
},
{0,
{"Region (common module)",0,0,"Regi[on]","#Region <?""Region name"", VariantChoice, ""Public"", ""Public"", ""Internal"", ""Internal"", ""Private"", ""Private"">

#EndRegion"}
},
{0,
{"Region (object module)",0,0,"Regi[on]","#Region <?""Region name"", VariantChoice, ""Variables"", ""Variables"", ""Public"", ""Public"", ""EventHandlers"", ""EventHandlers"", ""Internal"", ""Internal"", ""Private"", ""Private"", ""Initialize"", ""Initialize"">

#EndRegion"}
},
{0,
{"Region (manager module)",0,0,"Regi[on]","#Region <?""Region name"", VariantChoice, ""Public"", ""Public"", ""EventHandlers"", ""EventHandlers"", ""Internal"", ""Internal"", ""Private"", ""Private"">

#EndRegion"}
},
{0,
{"Region (form module)",0,0,"Regi[on]","#Region <?""Region name"", VariantChoice, ""Variables"", ""Variables"", ""FormEventHandlers"", ""FormEventHandlers"", ""FormHeaderItemsEventHandlers"", ""FormHeaderItemsEventHandlers"", ""FormTableItemsEventHandlers"", ""FormTableItemsEventHandlers#FromTableName"", ""FormCommandsEventHandlers"", ""FormCommandsEventHandlers"", ""Private"", ""Private"">

#EndRegion"}
},
{0,
{"Region (command module)",0,0,"Regi[on]","#Region <?""Region name"", VariantChoice, ""EventHandlers"", ""EventHandlers"", ""Private"", ""Private"">

#EndRegion"}
}
},
{24,
{"Module structure",1,0,"",""},
{0,
{"Common module",0,0,"Module=","///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <Module tiile: description and using conditions.>
// 
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Region Public

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Common module",0,0,"#M[odule]","///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <Module tiile: description and using conditions.>
// 
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Region Public

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Common module",0,0,"mst","///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// <Module tiile: description and using conditions.>
// 
// 
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Region Public

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Common module (regions only)",0,0,"Module=","#Region Public

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Common module (regions only)",0,0,"#M[odule]","#Region Public

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Common module (regions only)",0,0,"mst","#Region Public

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Object module",0,0,"Module=","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Variables

#EndRegion

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#Region Initialize

#EndRegion

#EndIf
"}
},
{0,
{"Object module",0,0,"#M[odule]","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Variables

#EndRegion

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#Region Initialize

#EndRegion

#EndIf
"}
},
{0,
{"Object module",0,0,"mst","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Variables

#EndRegion

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#Region Initialize

#EndRegion

#EndIf
"}
},
{0,
{"Manager module",0,0,"Module=","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#EndIf
"}
},
{0,
{"Manager module",0,0,"#M[odule]","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#EndIf
"}
},
{0,
{"Manager module",0,0,"mst","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#EndIf
"}
},
{0,
{"Form module",0,0,"Module=","#Region Variables

#EndRegion

#Region FormEventHandlers

#EndRegion

#Region FormHeaderItemsEventHandlers

#EndRegion

#Region FormTableItemsEventHandlers#FromTableName

#EndRegion

#Region FormCommandsEventHandlers

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Form module",0,0,"#M[odule]","#Region Variables

#EndRegion

#Region FormEventHandlers

#EndRegion

#Region FormHeaderItemsEventHandlers

#EndRegion

#Region FormTableItemsEventHandlers#FromTableName

#EndRegion

#Region FormCommandsEventHandlers

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Form module",0,0,"mst","#Region Variables

#EndRegion

#Region FormEventHandlers

#EndRegion

#Region FormHeaderItemsEventHandlers

#EndRegion

#Region FormTableItemsEventHandlers#FromTableName

#EndRegion

#Region FormCommandsEventHandlers

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Command module",0,0,"Module=","#Region EventHandlers

&AtClient
Procedure CommandProcessing(CommandParameter, CommandExecuteParameters)
	//TODO: Paste handler content.
	//FormParameters = New Structure("""", );
	//OpenForm(""CommonForm."", FormParameters, CommandExecuteParameters.Source, CommandExecuteParameters.Uniqueness, CommandExecuteParameters.Window, CommandExecuteParameters.URL);
EndProcedure

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Command module",0,0,"#M[odule]","#Region EventHandlers

&AtClient
Procedure CommandProcessing(CommandParameter, CommandExecuteParameters)
	//TODO: Paste handler content.
	//FormParameters = New Structure("""", );
	//OpenForm(""CommonForm."", FormParameters, CommandExecuteParameters.Source, CommandExecuteParameters.Uniqueness, CommandExecuteParameters.Window, CommandExecuteParameters.URL);
EndProcedure

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Command module",0,0,"mst","#Region EventHandlers

&AtClient
Procedure CommandProcessing(CommandParameter, CommandExecuteParameters)
	//TODO: Paste handler content.
	//FormParameters = New Structure("""", );
	//OpenForm(""CommonForm."", FormParameters, CommandExecuteParameters.Source, CommandExecuteParameters.Uniqueness, CommandExecuteParameters.Window, CommandExecuteParameters.URL);
EndProcedure

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Command module (regions only)",0,0,"Module=","#Region EventHandlers

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Command module (regions only)",0,0,"#M[odule]","#Region EventHandlers

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Command module (regions only)",0,0,"mst","#Region EventHandlers

#EndRegion

#Region Private

#EndRegion
"}
},
{0,
{"Business process module",0,0,"Module=","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Variables

#EndRegion

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#Region Initialize

#EndRegion

#EndIf
"}
},
{0,
{"Business process module",0,0,"#M[odule]","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Variables

#EndRegion

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#Region Initialize

#EndRegion

#EndIf
"}
},
{0,
{"Business process module",0,0,"mst","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then

#Region Variables

#EndRegion

#Region Public

#EndRegion

#Region EventHandlers

#EndRegion

#Region Internal

#EndRegion

#Region Private

#EndRegion

#Region Initialize

#EndRegion

#EndIf
"}
}
}
},
{13,
{"Instructions, directives, annotations",1,0,"",""},
{0,
{"#If Server",0,0,"#If","#If Server Then
<?>
#EndIf"}
},
{0,
{"#If Client",0,0,"#If","#If Client Then
<?>
#EndIf"}
},
{0,
{"#If (selection)",0,0,"#If","#If <?"""", VariantChoice, ""Client"", ""Client"", ""AtClient"", ""AtClient"", ""Server"", ""Server"", ""AtServer"", ""AtServer"", ""ThinClient"", ""ThinClient"", ""WebClient"", ""WebClient"", ""MobileAppClient"", ""MobileAppClient"", ""MobileAppServer"", ""MobileAppServer"", ""MobileClient"", ""MobileClient"", ""MobileStandaloneServer"", ""MobileStandaloneServer"", ""ThickClientManagedApplication"", ""ThickClientManagedApplication"", ""ThickClientOrdinaryApplication"", ""ThickClientOrdinaryApplication"", ""ExternalConnection"", ""ExternalConnection""> Then
<?>
#EndIf"}
},
{0,
{"#If (plug)",0,0,"#If","#If Server And Not Server Then
<?>
#EndIf"}
},
{0,
{"#If (plug)",0,0,"Plug","#If Server And Not Server Then
<?>
#EndIf"}
},
{0,
{"#If (server module)",0,0,"#If","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then
<?>
#EndIf"}
},
{0,
{"#If (server module with exception)",0,0,"#If","#If Server Or ThickClientOrdinaryApplication Or ExternalConnection Then
<?>
#Else
	Raise NStr(""en = 'Invalid object call on the client.'"");
#EndIf"}
},
{0,
{"Instruction",0,0,"Instru[ction]","#If <?"""", VariantChoice, ""Client"", ""Client"", ""AtClient"", ""AtClient"", ""Server"", ""Server"", ""AtServer"", ""AtServer"", ""ThinClient"", ""ThinClient"", ""WebClient"", ""WebClient"", ""MobileAppClient"", ""MobileAppClient"", ""MobileAppServer"", ""MobileAppServer"", ""MobileClient"", ""MobileClient"", ""MobileStandaloneServer"", ""MobileStandaloneServer"", ""ThickClientManagedApplication"", ""ThickClientManagedApplication"", ""ThickClientOrdinaryApplication"", ""ThickClientOrdinaryApplication"", ""ExternalConnection"", ""ExternalConnection""> Then
<?>
#EndIf"}
},
{0,
{"Instruction (without condition)",0,0,"Instru[ction]","<?"""", VariantChoice, ""Client"", ""Client"", ""AtClient"", ""AtClient"", ""Server"", ""Server"", ""AtServer"", ""AtServer"", ""ThinClient"", ""ThinClient"", ""WebClient"", ""WebClient"", ""MobileAppClient"", ""MobileAppClient"", ""MobileAppServer"", ""MobileAppServer"", ""MobileClient"", ""MobileClient"", ""MobileStandaloneServer"", ""MobileStandaloneServer"", ""ThickClientManagedApplication"", ""ThickClientManagedApplication"", ""ThickClientOrdinaryApplication"", ""ThickClientOrdinaryApplication"", ""ExternalConnection"", ""ExternalConnection"">"}
},
{0,
{"Directive",0,0,"Direc[tive]","<?"""", VariantChoice, ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">"}
},
{0,
{"Directive",0,0,"&At","<?"""", VariantChoice, ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">"}
},
{0,
{"Extension annotation",0,0,"&","<?"""", VariantChoice, ""Before"",""&Before"", ""After"",""&After"", ""Around"",""&Around"", ""ChangeAndValidate"",""&ChangeAndValidate"">"}
},
{0,
{"Extension annotation (procedure name)",0,0,"&","<?"""", VariantChoice, ""Before"",""&Before"", ""After"",""&After"", ""Around"",""&Around"", ""ChangeAndValidate"",""&ChangeAndValidate"">(""<?""Procedure name"">"")"}
}
},
{2,
{"Managed",1,0,"",""},
{9,
{"Procedure",1,0,"",""},
{0,
{"Procedure",0,0,"Proc[edur]","Procedure <?>()
	
EndProcedure"}
},
{0,
{"Procedure (with parameters)",0,0,"Procedure=","Procedure <?""Procedure name"">(<?""Parameters"">)
	
	<?>
	
EndProcedure"}
},
{0,
{"Procedure (full version)",0,0,"Procedure=","<?""Choice the kind of context"", VariantChoice, ""(Empty)"", """", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Procedure <?""Procedure name"">(<?""Parameters"">)<?""Exporting procedure"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	<?>
	
EndProcedure"}
},
{0,
{"Procedure (full version with comment)",0,0,"Procedure=","//TODO: <Procedure description>
//
// Parameters:
//  <Parameter1>  - <Type.Kind> - <parameter description>
//                 <further description>
//  <Parameter2>  - <Type.Kind> - <parameter description>
//                 <further description>
//
<?""Choice the kind of context"", VariantChoice, ""(Empty)"", ""//"", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Procedure <?""Procedure name"">(<?""Parameters"">)<?""Exporting procedure"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	<?>
	
EndProcedure"}
},
{0,
{"Procedure AtClient",0,0,"Proc[edure]","&AtClient
Procedure <?>()
	
EndProcedure"}
},
{0,
{"Procedure AtServer",0,0,"Proc[edure]","&AtServer
Procedure <?>()
	
EndProcedure"}
},
{0,
{"Procedure AtServerNoContext (form's module)",0,0,"Proc[edure]","&AtServerNoContext
Procedure <?>()
	
EndProcedure"}
},
{0,
{"Procedure AtClientAtServerNoContext (form's module)",0,0,"Proc[edure]","&AtClientAtServerNoContext
Procedure <?>()
	
EndProcedure"}
},
{0,
{"Procedure AtClientAtServer (command module)",0,0,"Proc[edure]","&AtClientAtServer
Procedure <?>()
	
EndProcedure"}
}
},
{9,
{"Function",1,0,"",""},
{0,
{"Function",0,0,"Func[tion]","Function <?>()
	
EndFunction"}
},
{0,
{"Function (with parameters)",0,0,"Func[tion]","Function <?""Function name"">(<?""Parameters"">)
	
	Result = Undefined;
	
	<?>
	
	Return Result;
	
EndFunction"}
},
{0,
{"Function (full version)",0,0,"Func[tion]","<?""Choice the kind of context"", VariantChoice, ""(Empty)"", """", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Function <?""Function name"">(<?""Parameters"">)<?""Exporting function"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	Result = Undefined;
	
	<?>
	
	Return Result;
	
EndFunction"}
},
{0,
{"Function (full version with comment)",0,0,"Func[tion]","//TODO: <Function description>
//
// Parameters:
//  <Parameter1>  - <Type.Kind> - <parameter description>
//                 <further description>
//  <Parameter2>  - <Type.Kind> - <parameter description>
//                 <further description>
//
// Returns:
//
// <Type.Kind> - <description>
//
<?""Choice the kind of context"", VariantChoice, ""(Empty)"", ""//"", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Function <?""Function name"">(<?""Parameters"">)<?""Exporting function"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	Result = Undefined;
	
	<?>
	
	Return Result;
	
EndFunction"}
},
{0,
{"Function AtClient",0,0,"Func[tion]","&AtClient
Function <?>()
	
EndFunction"}
},
{0,
{"Function AtServer",0,0,"Func[tion]","&AtServer
Function <?>()
	
EndFunction"}
},
{0,
{"Function AtServerNoContext (form's module)",0,0,"Func[tion]","&AtServerNoContext
Function <?>()
	
EndFunction"}
},
{0,
{"Function AtClientAtServerNoContext (form's module)",0,0,"Func[tion]","&AtClientAtServerNoContext
Function <?>()
	
EndFunction"}
},
{0,
{"Function AtClientAtServer (command module)",0,0,"Func[tion]","&AtClientAtServer
Function <?>()
	
EndFunction"}
}
}
},
{14,
{"Queries",1,0,"",""},
{0,
{"Query by wizard",0,0,"Query=","Query = new Query;
Query.Text = 
""<?"""", QueryText>"";

<?>Query.SetParameter("""", );
QueryResult = Query.Execute();
"}
},
{0,
{"Query manually",0,0,"Query=","Query = new Query;
Query.Text = 
""select
|	<?>
|"";

Query.SetParameter("""", );
QueryResult = Query.Execute();
"}
},
{0,
{"Query by wizard with result processing",0,0,"Query=","Query = new Query;
Query.Text = 
""<?"""", QueryText>"";

Query.SetParameter("""", );
QueryResult = Query.Execute();

If QueryResult.IsEmpty() then
	return; //continue | break
EndIf;

Selection = QueryResult.Select();
While Selection.Next() do
	
	<?>
	
EndDo;
"}
},
{0,
{"Query without wizard with result processing",0,0,"Query=","Query = New Query;
Query.Text = 
""<?>"";

Query.SetParameter("""", );
QueryResult = Query.Execute();

If QueryResult.IsEmpty() then
	return; //continue | break
EndIf;

Selection = QueryResult.Select();
While Selection.Next() Do
	
	
	
EndDo;
"}
},
{0,
{"Document",0,0,"Document.","Document.<?"""", MetadataObject, ""Document"", ""Document.TabularSection"">"}
},
{0,
{"Catalog",0,0,"Catalog.","Catalog.<?"""", MetadataObject, ""Catalog"", ""Catalog.TabularSectino"">"}
},
{0,
{"InformationRegister",0,0,"Register.","InformationRegister.<?"""", MetadataObject, ""InformationRegister""><?"""", VariantChoice, ""General table"", ""<?>"", ""SliceFirst"", "".SliceFirst(<?>)"", ""SliceLast"", "".SliceLast(<?>)"">"}
},
{0,
{"AccumulationRegister",0,0,"Register.","AccumulationRegister.<?"""", MetadataObject, ""AccumulationRegister""><?"""", VariantChoice, ""General table"", ""<?>"", ""Balance"", "".Balance(<?>)"", ""Turnovers"", "".Turnovers(<?>)"", ""BalanceAndTurnovers"", "".BalanceAndTurnovers(<?>)"">"}
},
{0,
{"AccountingRegister",0,0,"Register.","AccountingRegister.<?"""", MetadataObject, ""AccountingRegister""><?"""", VariantChoice, ""General table"", ""<?>"", ""ExtDimensions"", "".ExtDimensions"", ""RecordsWithExtDimensions"", "".RecordsWithExtDimensions(<?>)"", ""Balance"", "".Balance(<?>)"", ""Turnovers"", "".Turnovers(<?>)"", ""BalanceAndTurnovers"", "".BalanceAndTurnovers(<?>)"", ""DrCrTurnovers"", "".DrCrTurnovers(<?>)"">"}
},
{0,
{"CalculationRegister",0,0,"Register.","CalculationRegister.<?"""", MetadataObject, ""CalculationRegister"", ""CalculationRegister.Recalculation"">"}
},
{0,
{"LEFT JOIN",0,0,"LEFTJ[OIN]","LEFT JOIN<?>"}
},
{0,
{"RIGHT JOIN",0,0,"RIGHTJ[OIN]","RIGHT JOIN<?>"}
},
{0,
{"INNER JOIN",0,0,"INNERJ[OIN]","INNER JOIN<?>"}
},
{0,
{"FULL JOIN",0,0,"fullj[oin]","FULL JOIN<?>"}
}
},
{3,
{"Common objects",1,0,"",""},
{8,
{"Spreadsheet document",1,0,"",""},
{0,
{"TableDoc (create new)",0,0,"TableDoc=","TableDoc = New SpreadsheetDocument;
<?>"}
},
{0,
{"TablDoc (ordinary form item)",0,0,"TablDoc=","TablDoc = Controls.<?""Item name"">;
<?>"}
},
{0,
{"TablDoc (managed form item)",0,0,"TablDoc=","TablDoc = Items.<?""Item name"">;
<?>"}
},
{0,
{"TablDoc (report template)",0,0,"TablDoc=","TablDoc = New SpreadsheetDocument;
TablDoc.ShowGroups = True;
TablDoc.ShowHeaders = False;
TablDoc.ShowGrid = False;
TablDoc.ReadOnly = True;
TablDoc.Protection = False;

<?>

TablDoc.Show(""<Title>"");"}
},
{0,
{"Area",0,0,"Area=","Area<?""Area name""> = <?>.GetArea(""<?""Area name"">"");"}
},
{0,
{"Area output",0,0,"Area=","Area<?""Area name""> = <?>.GetArea(""<?""Area name"">"");
Area<?""Area name"">.Parameters.<ParameterName> = <ParameterValue>;
TablDoc.Put(Area<?""Area name"">);
<?>"}
},
{0,
{"GetTemplate",0,0,"Templ[ate=]","Template = GetTemplate(""<?""Template name"">"");"}
},
{0,
{"GetCommonTemplate",0,0,"Templ[ate=]","Template = GetCommonTemplate(""<?""Template name"">"");"}
}
},
{3,
{"User message",1,0,"",""},
{0,
{"User message",0,0,"Mess[age]","Msg = New UserMessage;
Msg.Text = NStr(""<?>"");
Msg.Message();"}
},
{0,
{"User message with attribute joining",0,0,"Mess[age]","Msg = New UserMessage;
Msg.Text = NStr(""<?>"");
Msg.Field = """"; // attribute name
Msg.SetData(); // IB object reference
Msg.Message();"}
},
{0,
{"User message with description",0,0,"Mess[age]","Msg = New UserMessage;
Msg.Text = NStr(""<?>"");

//Field – string, object field name whch have to join to message:
// Head requisite (checking requisite filling) – requisite name: Msg.Field = ""Customer"";
// Tabular section (checking existence TS strings) – tabular section name: Msg.Field = ""Goods"";
// Tabular section requisite – Msg.Field = «Goods[N].Price», when N is index of string (first is 0)
Msg.Field = """";

//SetData(Object) – sending object for checking his requisites (for example ThisObject);
// if checking form's requisite than method don't used (don't need the joining), and mesage have to
// maked in event FillCheckProcessingAtServer()
Msg.SetData(ThisObject);

//DataKey – reference of object whose form will be opening after click on message
//DataPath – string, form's general requisite name which contaned reference for DataKey
// If message didn't connected with general requisite then don't need for filling one.
// In that case to fill the Field is enough.
Msg.DataKey = Object.Ref;
Msg.DataPath = ""Object"";
Msg.Message();
"}
}
},
{4,
{"Data lock",1,0,"",""},
{0,
{"DataLock InformationRegister",0,0,"Lock=","Lock = New DataLock;
LockItem = Lock.Add(""InformationRegister.<?"""", InformationRegister>"");
LockItem.Mode = <?"""", VariantChoice, ""DataLockMode.Exclusive"", ""DataLockMode.Exclusive"", ""DataLockMode.Shared"", ""DataLockMode.Shared"">;
//LockItem.DataSource = <?>;
//LockItem.UseFromDataSource("""", """");
//LockItem.SetValue("""", );
Lock.Lock();"}
},
{0,
{"DataLock AccumulationRegister",0,0,"Lock=","Lock = New DataLock;
LockItem = Lock.Add(""AccumulationRegister.<?"""", AccumulationRegister>"");
LockItem.Mode = <?"""", VariantChoice, ""DataLockMode.Exclusive"", ""DataLockMode.Exclusive"", ""DataLockMode.Shared"", ""DataLockMode.Shared"">;
//LockItem.DataSource = <?>;
//LockItem.UseFromDataSource("""", """");
//LockItem.SetValue("""", );
Lock.Lock();"}
},
{0,
{"DataLock AccountingRegister",0,0,"Lock=","Lock = New DataLock;
LockItem = Lock.Add(""AccountingRegister.<?"""", AccountingRegister>"");
LockItem.Mode = <?"""", VariantChoice, ""DataLockMode.Exclusive"", ""DataLockMode.Exclusive"", ""DataLockMode.Shared"", ""DataLockMode.Shared"">;
//LockItem.SetValue(""Period"", New Range( , ));
//LockItem.SetValue(""Account"", );
Lock.Lock();"}
},
{0,
{"DataLock CalculationRegister",0,0,"Lock=","Lock = New DataLock;
LockItem = Lock.Add(""CalculationRegister.<?"""", CalculationRegister>"");
LockItem.Mode = <?"""", VariantChoice, ""DataLockMode.Exclusive"", ""DataLockMode.Exclusive"", ""DataLockMode.Shared"", ""DataLockMode.Shared"">;
//LockItem.DataSource = <?>;
//LockItem.UseFromDataSource("""", """");
//LockItem.SetValue("""", );
Lock.Lock();"}
}
}
},
{5,
{"Quick snippets",1,0,"",""},
{0,
{"&AtClient",0,0,"&AtCl[ient]","&AtClient"}
},
{0,
{"&AtServer",0,0,"&AtSer[ver]","&AtServer"}
},
{0,
{"&AtServerNoContext",0,0,"&AtSer[ver]","&AtServerNoContext"}
},
{0,
{"&AtClientAtServerNoContext",0,0,"&AtCl[ient]","&AtClientAtServerNoContext"}
},
{0,
{"&AtClientAtServer",0,0,"&AtCl[ient]","&AtClientAtServer"}
}
},
{16,
{"Universal value collections",1,0,"",""},
{0,
{"Array",0,0,"newAr[ray]","Array = new Array(<?>);"}
},
{0,
{"Array",0,0,"Collection=","Array = new Array(<?>);"}
},
{0,
{"Map",0,0,"newMap","Map = new Map;
<?>"}
},
{0,
{"Map",0,0,"Collection=","Map = new Map;
<?>"}
},
{0,
{"List of values",0,0,"newList","List = new ValueList;
<?>"}
},
{0,
{"List of values",0,0,"Collection=","List = New ValueList;
<?>"}
},
{0,
{"List of values (create and append)",0,0,"List=","<?""Variable name""> = New ValueList;
<?""Variable name"">.Add(<?>, ""<Presentation>"", <Check>, <Picture>);"}
},
{0,
{"Structure",0,0,"newStr[ucture]","Structure = new Structure(""<?>"", );"}
},
{0,
{"Structure",0,0,"Collection=","Structure = New Structure;
<?>"}
},
{0,
{"Structure (create and append)",0,0,"Structure=","<?""Variable name""> = New Structure;
<?""Variable name"">.Insert(""<?>"", );"}
},
{0,
{"Structure (property check)",0,0,"Structure=","If <?""Variable name"">.Property(""<Key>"", <SearchValue>) Then
	<?>
EndIf;"}
},
{0,
{"Values table",0,0,"newVal[ueTable]","VTab = new ValueTable;
<?>"}
},
{0,
{"Values table",0,0,"Collection=","VTab = new ValueTable;
<?>"}
},
{0,
{"Value tree",0,0,"newTree","ValueTree = new ValueTree;
<?>"}
},
{0,
{"Value tree",0,0,"Collection=","ValueTree = new ValueTree;
<?>"}
},
{0,
{"KeyAndValue (round collection)",0,0,"Key=","For each KeyAndValue in <?> do
	
	Key = KeyAndValue.Key;
	Value = KeyAndValue.Value;
	
EndDo;"}
}
},
{9,
{"Applied objects",1,0,"",""},
{0,
{"Enum value",0,0,"Enums=","Enums.<?"""", EnumValue>"}
},
{0,
{"AccountDrChoice",0,0,"Account[Dr=]","AccountDr = <?"""", ChartOfAccountsPredefinedData>;"}
},
{0,
{"AccountCrChoice",0,0,"Account[Cr=]","AccountCr = <?"""", ChartOfAccountsPredefinedData>;"}
},
{0,
{"RegisterRecord",0,0,"Register[Record=]","Record = RegisterRecords<?>
Record.Period = Date;"}
},
{0,
{"ExtDimensionsDr",0,0,"ExtDimen[sionsDr=]","ExtDimensionsDr[<?"""", ChartOfCharacteristicTypesPredefinedData>] = <?>;"}
},
{0,
{"ExtDimensionsCr",0,0,"ExtDimen[sionsCr=]","ExtDimensionsCr[<?"""", ChartOfCharacteristicTypesPredefinedData>] = <?>;"}
},
{0,
{"Boundary",0,0,"newBou[ndary]","Boundary = new Boundary(<?>, <?"""", VariantChoice, ""BoundaryType.Including"", ""BoundaryType.Including"", ""BoundaryType.Excluding"", ""BoundaryType.Excluding"">);"}
},
{2,
{"RecordType",1,0,"",""},
{0,
{"AccumulationRegisters",0,0,"ВидД[вижения=]","RecordType = <?"""", VariantChoice, ""Receipt"", ""AccumulationRecordType.Receipt"", ""Expense"", ""AccumulationRecordType.Expense"">;"}
},
{0,
{"AccountingRegisters",0,0,"ВидД[вижения=]","RecordType = <?"""", VariantChoice, ""Debit"", ""AccountingRecordType.Debit"", ""Credit"", ""AccountingRecordType.Credit"">;"}
}
},
{5,
{"Registers records",1,0,"",""},
{0,
{"RecordSet InformationRegister",0,0,"RecordSet=","RecordSet = InformationRegisters.<?"""", InformationRegister>.CreateRecordSet();"}
},
{0,
{"RecordSet AccumulationRegister",0,0,"RecordSet=","RecordSet = AccumulationRegisters.<?"""", AccumulationRegister>.CreateRecordSet();
RecordSet.Filter.Recorder.Set(<?>);
RecordSet.Read();"}
},
{0,
{"RecordSet AccountingRegister",0,0,"RecordSet=","RecordSet = AccountingRegisters.<?"""", AccountingRegister>.CreateRecordSet();
RecordSet.Filter.Recorder.Set(<?>);
RecordSet.Read();"}
},
{0,
{"RecordSet CalculationRegister",0,0,"RecordSet=","RecordSet = CalculationRegisters.<?"""", CalculationRegister>.CreateRecordSet();
RecordSet.Filter.Recorder.Set(<?>);
RecordSet.Read();"}
},
{0,
{"Calculation register record",0,0,"Record=","Record = RegisterRecords.<?"""", CalculationRegister>.Add();
Record.RegistrationPeriod = Date;
Record.BegOfActionPeriod = ;
Record.EndOfEffectivePeriod = ;
Record.ReversingEntry = False;
Record.BegOfBasePeriod = ;
Record.EndOfBasePeriod = ;"}
}
}
},
{7,
{"Dialogs",1,0,"",""},
{0,
{"PeriodSettings",0,0,"PeriodSet[tings]","PeriodSettings = new PeriodSettings;
PeriodSettings.SetPeriod(PeriodFrom, ?(PeriodTo = '0001-01-01', PeriodTo, EndOfDay(PeriodTo)));
PeriodSettings.EditAsInterval = true;
PeriodSettings.EditAsPeriod = true;
PeriodSettings.SettingsMode = PeriodSettingsVariant.Period;

If PeriodSettings.Edit() then
	PeriodFrom = PeriodSettings.GetDateFrom();
	PeriodTo = PeriodSettings.GetDateTo();
EndIf;
"}
},
{0,
{"FileDialog",0,0,"FileChoice","FileDialog = new FileDialog(FileDialogMode.Save);
//FileDialog.Directory = ""%HOMEPATH%"";
//FileDialog.FullFileName = FileName;
FileDialog.Multiselect = false;
FileDialog.Title = NStr(""en = 'File choice'"");
FileDialog.Filter = ""Texts(*.txt)|*.txt|All files (*.*)|*.*"";
FileDialog.FilterIndex = 0;

If FileDialog.Choose() then
	FileName = FileDialog.FullFileName;
EndIf;
"}
},
{0,
{"FileDialog",0,0,"FileDialog","FileDialog = new FileDialog(FileDialogMode.Save);
//FileDialog.Directory = ""%HOMEPATH%"";
//FileDialog.FullFileName = FileName;
FileDialog.Multiselect = false;
FileDialog.Title = NStr(""en = 'File choice'"");
FileDialog.Filter = ""Texts(*.txt)|*.txt|All files (*.*)|*.*"";
FileDialog.FilterIndex = 0;

If FileDialog.Choose() then
	FileName = FileDialog.FullFileName;
EndIf;
"}
},
{2,
{"Message box",1,0,"",""},
{0,
{"Message box",0,0,"ShowM[essageBox]","ShowMessageBox(,<?>, 60);"}
},
{0,
{"Message box with callback",0,0,"ShowM[essageBox]","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowMessageBox(CallbackDescription, <?>, 60);

//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(AdditionalParameters) Export
	
EndProcedure
"}
}
},
{8,
{"Question",1,0,"",""},
{0,
{"Question",0,0,"Answer=","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
EndProcedure
"}
},
{0,
{"Question",0,0,"ShowQ[ueryBox]","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
EndProcedure
"}
},
{0,
{"Question",0,0,"Ques[tion]","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
EndProcedure
"}
},
{0,
{"Question",0,0,"DoQuery[Box]","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
EndProcedure
"}
},
{0,
{"Question with result analysis",0,0,"Answer=","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
	If QuetyResult <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> Then
		
	EndIf;
	
EndProcedure
"}
},
{0,
{"Question with result analysis",0,0,"ShowQ[ueryBox]","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
	If QuetyResult <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> Then
		
	EndIf;
	
EndProcedure
"}
},
{0,
{"Question with result analysis",0,0,"Ques[tion]","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
	If QuetyResult <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> Then
		
	EndIf;
	
EndProcedure
"}
},
{0,
{"Question with result analysis",0,0,"DoQuery[Box]","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
ShowQueryBox(CallbackDescription, ""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(QuetyResult, AdditionalParameters) Export
	
	If QuetyResult <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> Then
		
	EndIf;
	
EndProcedure
"}
}
},
{1,
{"BeginPutFile",1,0,"",""},
{0,
{"PutFile",0,0,"PutFile","CallbackDescription = New CallbackDescription(""<?""Callback procedure name"">"", ThisObject);
BeginPutFile(CallbackDescription, , ,True, UUID);

<?>
//Take it to a separate procedure
&AtClient
Procedure <?""Callback procedure name"">(Result, Address, ChoosingFileName, AdditionalParameters) Export
	
EndProcedure
"}
}
},
{7,
{"Open form (managed)",1,0,"",""},
{0,
{"General form of new object",0,0,"OpenF[orm]","OpenForm(""Catalog.<?"""", MetadataObject, ""Catalog"">.ObjectForm"");"}
},
{0,
{"General form of new folder",0,0,"OpenF[orm]","Parameters = New Structure(""ЭтоГруппа"", True);
OpenForm(""Catalog.<?"""", MetadataObject, ""Catalog"">.FolderForm"", Parameters);"}
},
{0,
{"List form or choice form",0,0,"OpenF[orm]","OpenForm(""Catalog.<?"""", MetadataObject, ""Catalog"">.<?"""", VariantChoice, ""ListForm"", ""ListForm"", ""ChoiceForm"", ""ChoiceForm"", ""FolderChoiceForm"", ""FolderChoiceForm"">"");"}
},
{0,
{"Free form",0,0,"OpenF[orm]","OpenForm(""Catalog.<?"""", MetadataObject, ""Catalog"">.Form.<?>"");"}
},
{0,
{"General form of existing object",0,0,"OpenF[orm]","Parameters = New Structure(""Key"", <?><CatalogItemReference>);
OpenForm(""Catalog.<?"""", MetadataObject, ""Catalog"">.ObjectForm"", Parameters);"}
},
{0,
{"List form and activate the item",0,0,"OpenF[orm]","Parameters = New Structure(""CurrentRow"", <?><CatalogItemReference>);
OpenForm(""Catalog.<?"""", MetadataObject, ""Catalog"">.ListForm"", Parameters);"}
},
{0,
{"List of subcatalog with filter by owner",0,0,"OpenF[orm]","FilterConditions = New Structure(""Owner"", <?><OwnerItemReference>);
Parameters = New Structure(""Filter"", FilterConditions);
OpenForm(""Catalog.<?"""", MetadataObject, ""Catalog"">.ListForm"", Parameters);"}
}
}
},
{27,
{"Abbreviation",1,0,"",""},
{0,
{"BegOfMonth",0,0,"BM","BegOfMonth(<?>)"}
},
{0,
{"EndOfMonth",0,0,"EM","EndOfMonth(<?>)"}
},
{0,
{"BegOfDay",0,0,"BD","BegOfDay(<?>)"}
},
{0,
{"EndOfDay",0,0,"ED","EndOfDay(<?>)"}
},
{0,
{"CurrentDate",0,0,"CD","CurrentDate()<?>"}
},
{0,
{"CurrentSessionDate",0,0,"CD","CurrentSessionDate()<?>"}
},
{0,
{"CurrentSessionDate",0,0,"CSD","CurrentSessionDate()<?>"}
},
{0,
{"BegOfEffectivePeriod",0,0,"BEP","BegOfEffectivePeriod"}
},
{0,
{"EndOfEffectivePeriod",0,0,"EEP","EndOfEffectivePeriod"}
},
{0,
{"BegOfBasePeriod",0,0,"BBP","BegOfBasePeriod"}
},
{0,
{"EndOfBasePeriod",0,0,"EBP","EndOfBasePeriod"}
},
{0,
{"ChartsOfCharacteristicTypes",0,0,"CCT","<?"""", ChartOfCharacteristicTypesPredefinedData>"}
},
{0,
{"ChartsOfCalculationTypes",0,0,"CCT","<?"""", ChartOfCalculationTypesPredefinedData>"}
},
{0,
{"AddMonth",0,0,"AM","AddMonth(<?>,)"}
},
{0,
{"Undefined",0,0,"Undef[ined]","Undefined"}
},
{0,
{"SetParameter",0,0,"SP","SetParameter(""<?>"",);"}
},
{0,
{"Counterparty",0,0,"Cou[nterparty]","Counterparty"}
},
{0,
{"Products",0,0,"Prod[ucts]","Products"}
},
{0,
{"Count",0,0,"Cou[nt]","Count"}
},
{0,
{"Amount",0,0,"Amo[unt]","Amount"}
},
{0,
{"SetParameterValue",0,0,"SPV","SetParameterValue(""<?>"",);"}
},
{0,
{"PointInTime",0,0,"PIT","PointInTime()"}
},
{0,
{"PointInTime",0,0,"PT","PointInTime()"}
},
{0,
{"FillPropertyValues",0,0,"FPV","FillPropertyValues(<?>)"}
},
{0,
{"ValueIsFilled",0,0,"VIF","ValueIsFilled(<?>)"}
},
{0,
{"ValueIsFilled",0,0,"VF","ValueIsFilled(<?>)"}
},
{0,
{"PictureLib",0,0,"PL","PictureLib"}
}
},
{11,
{"Other",1,0,"",""},
{0,
{"Format",0,0,"Format","Format(<?>, ""<?, FormatString>"")"}
},
{0,
{"Type description constructor",0,1,"Type=","<?""Type description constructor"", TypeDescriptionConstructor>"}
},
{0,
{"Type check",0,0,"","If TypeOf(<?""Checking type expression"">) = Type(""<?""Choose type"", TypeChoice>"") then

	<?>

EndIf;"}
},
{0,
{"Font",0,0,"Font=","// CONSTRUCTOR Font name, Size, Bold, Italics, Underscore, StrikeOut, Scale
Font = new Font(<?>, , , , , );"}
},
{0,
{"NumberInWords",0,0,"Number[InWords]","NumberInWords(<?>,,""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")"}
},
{0,
{"NumberInWords (RUB, Russia)",0,0,"Number[InWords]","NumberInWords(<?>, ""L = ru_RU; FS = True"", ""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"");"}
},
{0,
{"NumberInWords (Dollars, USA)",0,0,"Number[InWords]","NumberInWords(<?>, ""L = en_US; FS = True"", ""dollar, dollars, cent, cents, 2"");"}
},
{0,
{"NumberInWords (Euro, Germany)",0,0,"Number[InWords]","NumberInWords(<?>, ""L = de_DE; FS = True"", ""EURO, EURO, М, Cent, Cent, M, 2"");"}
},
{0,
{"NumberInWords (RON, Romania)",0,0,"Number[InWords]","NumberInWords(<?>, ""L = ro_RO; FS = True"", ""leu, lei, M, ban, bani, W, 2"");"}
},
{0,
{"Selection",0,0,"Select[ion=]","Selection = <?>.Select();
While Selection.Next() do
	
EndDo;"}
},
{0,
{"NStr EN RU",0,0,"NStr","NStr(""ru = '<?>...'; en = '...'"")"}
}
},
{6,
{"Extensions",1,0,"",""},
{0,
{"#Insert (extensions)",0,0,"#Ins[ert]","#Insert
<?>
#EndInsert"}
},
{0,
{"#Delete (extensions)",0,0,"#Del[ete]","#Delete
<?>
#EndDelete"}
},
{0,
{"Extension #Insert",0,0,"Ext[ension]","#Insert
<?>
#EndInsert"}
},
{0,
{"Extension #Delete",0,0,"Ext[ension]","#Delete
<?>
#EndDelete"}
},
{5,
{"Procedure",1,0,"",""},
{0,
{"Extension &Before",0,0,"Proc[edure]","&Before(""<?""Procedure name"">"")
Procedure <?""Procedure name"">()
	
	<?>
	
EndProcedure"}
},
{0,
{"Extension &After",0,0,"Proc[edure]","&After(""<?""Procedure name"">"")
Procedure <?""Procedure name"">()
	
	<?>
	
EndProcedure"}
},
{0,
{"Extension &Around",0,0,"Proc[edure]","&Around(""<?""Procedure name"">"")
Procedure <?""Procedure name"">()
	
	<?>
	//ProceedWithCall();
	
EndProcedure"}
},
{0,
{"Extension &ChangeAndValidate",0,0,"Proc[edure]","&ChangeAndValidate(""<?""Procedure name"">"")
Procedure PREFIX_<?""Procedure name"">()
	
	<?>
	
EndProcedure"}
},
{0,
{"Extension Procedure",0,0,"Ext[ension]","<?""Option"", VariantChoice, ""Before"", ""&Before"", ""After"", ""&After"", ""Around"", ""&Around"", ""Change and validate"", ""&ChangeAndValidate"">(""<?""Procedure name"">"")
Procedure PREFIX_<?""Procedure name"">()
	
	<?>
	//ProceedWithCall(); (for &Around)
	
EndProcedure"}
}
},
{5,
{"Function",1,0,"",""},
{0,
{"Extension &Before",0,0,"Func[tion]","&Before(""<?""Function name"">"")
Function <?""Function name"">()
	
	<?>
	Return Undefined;
	
EndFunction"}
},
{0,
{"Extension &After",0,0,"Func[tion]","&After(""<?""Function name"">"")
Function <?""Function name"">()
	
	<?>
	Return Undefined;
	
EndFunction"}
},
{0,
{"Extension &Around",0,0,"Func[tion]","&Around(""<?""Function name"">"")
Function <?""Function name"">()
	
	<?>
	Return ProceedWithCall();
	
EndFunction"}
},
{0,
{"Extension &ChangeAndValidate",0,0,"Func[tion]","&ChangeAndValidate(""<?""Function name"">"")
Function PREFIX_<?""Function name"">()
	
	<?>
	Return Undefined;
	
EndFunction"}
},
{0,
{"Extension Function",0,0,"Ext[ension]","<?""Option"", VariantChoice, ""Before"", ""&Before"", ""After"", ""&After"", ""Around"", ""&Around"", ""Change and validate"", ""&ChangeAndValidate"">(""<?""Function name"">"")
Function PREFIX_<?""Function name"">()
	
	<?>
	Return Undefined; //Return ProceedWithCall(); (for &Around)
	
EndFunction"}
}
}
},
{5,
{"Asynchronous calls",1,0,"",""},
{5,
{"Callback and promise",1,0,"",""},
{0,
{"Callback description",0,0,"Call[back]","CallbackDescription = New CallbackDescription(""<?""Procedure name"">"", ThisObject);
<?>"}
},
{0,
{"Callback description (handler description)",0,0,"Call[back]","CallbackDescription = New CallbackDescription(""<?""Procedure name"">"", ThisObject);

//==========Take it to a separate procedure========
//
//The list of arguments depends on the context of the call!
//&AtClient
//Procedure <?""Procedure name"">(AdditionalParameters) Export
//	
//EndProcedure"}
},
{0,
{"Callback description with error handling",0,0,"Call[back]","CallbackDescription = New CallbackDescription(""<?""Procedure name"">"", ThisObject, ,""<?""Procedure name"">ErrorHandling"", ThisObject);
<?>"}
},
{0,
{"Callback description with error handling (handler description)",0,0,"Call[back]","CallbackDescription = New CallbackDescription(""<?""Procedure name"">"", ThisObject, ,""<?""Procedure name"">ErrorHandling"", ThisObject);


//==========Take it to a separate procedure========
//
//The list of arguments depends on the context of the call!
//&AtClient
//Procedure <?""Procedure name"">(AdditionalParameters) Export
//	
//EndProcedure

//&AtClient
//Procedure <?""Procedure name"">ErrorHandling(AdditionalParameters) Export
//	
//EndProcedure"}
},
{0,
{"Promise",0,0,"Prom[ise=]","Promise = Await <?>;"}
}
},
{9,
{"Procedure",1,0,"",""},
{0,
{"Async Procedure",0,0,"Async[Procedure]","Async Procedure <?>()
	
EndProcedure"}
},
{0,
{"Async Procedure (with parameters)",0,0,"Async[Procedure]","Async Procedure <?""Procedure name"">(<?""Parameters"">)
	
	<?>
	
EndProcedure"}
},
{0,
{"Async Procedure (full version)",0,0,"Async[Procedure]","<?""Choice the kind of context"", VariantChoice, ""(Empty)"", """", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Async Procedure <?""Procedure name"">(<?""Parameters"">)<?""Exporting procedure"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	<?>
	
EndProcedure"}
},
{0,
{"Async Procedure (full version with comment)",0,0,"Async[Procedure]","//TODO: <Procedure description>
//
// Parameters:
//  <Parameter1>  - <Type.Kind> - <parameter description>
//                 <further description>
//  <Parameter2>  - <Type.Kind> - <parameter description>
//                 <further description>
//
<?""Choice the kind of context"", VariantChoice, ""(Empty)"", ""//"", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Async Procedure <?""Procedure name"">(<?""Parameters"">)<?""Exporting procedure"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	<?>
	
EndProcedure"}
},
{0,
{"Async Procedure AtClient",0,0,"Async[Procedure]","&AtClient
Async Procedure <?>()
	
EndProcedure"}
},
{0,
{"Async Procedure AtServer",0,0,"Async[Procedure]","&AtServer
Async Procedure <?>()
	
EndProcedure"}
},
{0,
{"Async Procedure AtServerNoContext (form's module)",0,0,"Async[Procedure]","&AtServerNoContext
Async Procedure <?>()
	
EndProcedure"}
},
{0,
{"Async Procedure AtClientAtServerNoContext (form's module)",0,0,"Async[Procedure]","&AtClientAtServerNoContext
Async Procedure <?>()
	
EndProcedure"}
},
{0,
{"Async Procedure AtClientAtServer (command module)",0,0,"Async[Procedure]","&AtClientAtServer
Async Procedure <?>()
	
EndProcedure"}
}
},
{9,
{"Function",1,0,"",""},
{0,
{"Async Function",0,0,"Async[Function]","Async Function <?>()
	
EndFunction"}
},
{0,
{"Async Function (with parameters)",0,0,"Async[Function]","Async Function <?""Function name"">(<?""Parameters"">)
	
	Result = Undefined;
	
	<?>
	
	Return Result;
	
EndFunction"}
},
{0,
{"Async Function (full version)",0,0,"Func[tion]","<?""Choice the kind of context"", VariantChoice, ""(Empty)"", """", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Async Function <?""Function name"">(<?""Parameters"">)<?""Exporting function"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	Result = Undefined;
	
	<?>
	
	Return Result;
	
EndFunction"}
},
{0,
{"Async Function (full version with comment)",0,0,"Async[Function]","//TODO: <Function description>
//
// Parameters:
//  <Parameter1>  - <Type.Kind> - <parameter description>
//                 <further description>
//  <Parameter2>  - <Type.Kind> - <parameter description>
//                 <further description>
//
// Returns:
//
// <Type.Kind> - <description>
//
<?""Choice the kind of context"", VariantChoice, ""(Empty)"", ""//"", ""AtClient"", ""&AtClient"", ""AtServer"", ""&AtServer"", ""AtClientAtServer (command module)"", ""&AtClientAtServer"", ""AtServerNoContext (form's module)"", ""&AtServerNoContext"", ""AtClientAtServerNoContext (form's module)"", ""&AtClientAtServerNoContext"">
Async Function <?""Function name"">(<?""Parameters"">)<?""Exporting function"", VariantChoice, ""Exporting"", "" Export"", ""No exporting"", """">
	
	Result = Undefined;
	
	<?>
	
	Return Result;
	
EndFunction"}
},
{0,
{"Async Function AtClient",0,0,"Async[Function]","&AtClient
Async Function <?>()
	
EndFunction"}
},
{0,
{"Async Function AtServer",0,0,"Func[tion]","&AtServer
Async Function <?>()
	
EndFunction"}
},
{0,
{"Async Function AtServerNoContext (form's module)",0,0,"Async[Function]","&AtServerNoContext
Async Function <?>()
	
EndFunction"}
},
{0,
{"Async Function AtClientAtServerNoContext (form's module)",0,0,"Async[Function]","&AtClientAtServerNoContext
Async Function <?>()
	
EndFunction"}
},
{0,
{"Async Function AtClientAtServer (command module)",0,0,"Async[Function]","&AtClientAtServer
Async Function <?>()
	
EndFunction"}
}
},
{8,
{"Question",1,0,"",""},
{0,
{"Async Question",0,0,"Answer=","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);"}
},
{0,
{"Async Question",0,0,"ShowQ[ueryBox]","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);"}
},
{0,
{"Async Question",0,0,"Ques[tion]","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);"}
},
{0,
{"Async Question",0,0,"DoQuery[Box]","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);"}
},
{0,
{"Async Question with result analysis",0,0,"Answer=","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

If Answer <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> then
	
EndIf;"}
},
{0,
{"Async Question with result analysis",0,0,"ShowQ[ueryBox]","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

If Answer <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> then
	
EndIf;"}
},
{0,
{"Async Question with result analysis",0,0,"Ques[tion]","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

If Answer <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> then
	
EndIf;"}
},
{0,
{"Async Question with result analysis",0,0,"DoQuery[Box]","Answer = await DoQueryBoxAsync(""<?""Question text"">"",<?""Question dialog mode"", VariantChoice, ""YesNo"", ""QuestionDialogMode.YesNo"", ""YesNoCancel"", ""QuestionDialogMode.YesNoCancel"", ""OK"", ""QuestionDialogMode.OK"", ""OKCancel"", ""QuestionDialogMode.OKCancel"", ""RetryCancel"", ""QuestionDialogMode.RetryCancel"", ""AbortRetryIgnore"", ""QuestionDialogMode.AbortRetryIgnore"">, 60);

If Answer <?"""", VariantChoice, ""Equal"", ""="", ""Not equal"", ""<>""> <?""Dialog return code"", VariantChoice, ""Yes"", ""DialogReturnCode.Yes"", ""No"", ""DialogReturnCode.No"", ""OK"", ""DialogReturnCode.OK"", ""Cancel"", ""DialogReturnCode.Cancel"", ""Retry"", ""DialogReturnCode.Retry"", ""Abort"", ""DialogReturnCode.Abort"", ""Ignore"", ""DialogReturnCode.Ignore"", ""Timeout"", ""DialogReturnCode.Timeout""> then
	
EndIf;"}
}
},
{2,
{"Put the file in temporary storage",1,0,"",""},
{0,
{"Put file",0,0,"","&AtClient
Procedure PutFileCommand(Command)
	
	DialogParameters = new PutFilesDialogParameters;
	DialogParameters.Title = ""BeginPutFileToServer"";
	DialogParameters.MultipleChoice = true;
	DialogParameters.Filter = ""All files|*.*"";
	//NStr(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	//NStr(""en = 'Text (*.txt)|*.txt|'; ru = 'текстовый файл (*.txt)|*.txt|'"");
	FinishCallback   = new CallbackDescription(""FinishCallback"", ThisObject);
	ProgressCallback = new CallbackDescription(""ProgressCallback"", ThisObject);
	BeforCallback    = new CallbackDescription(""BeforCallback"", ThisObject);
	BeginPutFileToServer(FinishCallback, ProgressCallback, BeforCallback, , DialogParameters);
	
EndProcedure

&AtClient
Procedure FinishCallback(FilePuttingDescription, AdditionalParameters) Export
	
	Message(""File putting process "" + ?(FilePuttingDescription.FilePuttingCanceled, ""was canceled"", ""has done successfully""));
	Message(""Address in the temporary storage: "" + FilePuttingDescription.Address);
	Message(""File name: "" + FilePuttingDescription.FileRef.Name);
	Message(""File size (bites): "" + FilePuttingDescription.FileRef.Size());
	
EndProcedure

&AtClient
Procedure ProgressCallback(FilePutting, HasPut, Cancel, AdditionalParameters) Export
	Status(""File "" + FilePutting.Name, HasPut, ""File size is "" + FilePutting.Size() + "" bites"", PictureLib.Document);
EndProcedure

&AtClient
Procedure BeforCallback(FilePutting, Cancel, AdditionalParameters) Export
	Message(""Putting file is "" + FilePutting.Name + "", size is "" + FilePutting.Size());
EndProcedure"}
},
{0,
{"Put file Async",0,0,"","&AtClient
Async Procedure PutFileCommand(Command)
	
	DialogParameters = new PutFilesDialogParameters;
	DialogParameters.Title = ""BeginPutFileToServer"";
	DialogParameters.MultipleChoice = true;
	DialogParameters.Filter = ""All files|*.*"";
	//NStr(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	//NStr(""en = 'Text (*.txt)|*.txt|'; ru = 'текстовый файл (*.txt)|*.txt|'"");
	ProgressCallback = new CallbackDescription(""ProgressCallback"", ThisObject);
	BeforCallback = new CallbackDescription(""BeforCallback"", ThisObject);
	FilePuttingDescription = await BeginPutFileToServer(ProgressCallback, BeforCallback, , DialogParameters);
	
	If FilePuttingDescription = undefined then return; EndIf;
	
	Message(""File putting process "" + ?(FilePuttingDescription.FilePuttingCanceled, ""was canceled"", ""has done successfully""));
	Message(""Address in the temporary storage: "" + FilePuttingDescription.Address);
	Message(""File name: "" + FilePuttingDescription.FileRef.Name);
	Message(""File size (bites): "" + FilePuttingDescription.FileRef.Size());
	
EndProcedure

&AtClient
Procedure ProgressCallback(PuttingFile, HasPut, Cancel, AdditionalParameters) Export
	Message(""File "" + PuttingFile.Имя, HasPut, ""File size is "" + PuttingFile.Size() + "" bites"", PictureLib.Document);
EndProcedure

&AtClient
Procedure BeforCallback(PuttingFile, Cancel, AdditionalParameters) Export
	Message(""Putting file is "" + PuttingFile.Name + "", size is "" + PuttingFile.Size());
EndProcedure"}
}
}
},
{4,
{"Helpfulness",1,0,"",""},
{7,
{"Forms",1,0,"",""},
{0,
{"Add form requisite",0,0,"","Procedure AddFormRequisite(Form, Name, RequisiteType, Path = """", Header = """", SavedData = False) Export
	
	Requisite = New FormAttribute(Name, RequisiteType, Path, Header, SavedData);
	AddedRequisites = New Array;
	AddedRequisites.Add(Requisite);
	Form.ChangeAttributes(AddedRequisites);
	
EndProcedure
"}
},
{0,
{"Add form command",0,0,"","Function AddFormCommand(Form, CommandName, ActionName, Title) Export
	
	Command = Form.Commands.Add(CommandName);
	Command.Action = ActionName;
	Command.Title = Title;
	
	Return Command;
	
EndFunction
"}
},
{0,
{"Add item -  form button",0,0,"","Function AddButtonOnForm(Items, Name, ParentGroup = Undefined, ItemBefor = Undefined, CommandName = """") Export
	
	If ItemBefor = Undefined Then
		NewItem = Items.Add(Name, Type(""FormButton""), ParentGroup);
	Else
		NewItem = Items.Insert(Name, Type(""FormButton""), ParentGroup, ItemBefor);
	EndIf;
	
	NewItem.Type = FormButtonType.UsualButton; // Hyperlink, CommandBarButton, CommandBarHyperlink
	NewItem.CommandName = CommandName;
	
	Return NewItem;
	
EndFunction
"}
},
{0,
{"Add item - form group",0,0,"","Function AddGroupOnForm(Items, Name, ParentGroup = Undefined, ItemBefor = Undefined) Export
	
	If ItemBefor = Undefined Then
		NewItem = Items.Add(Name, Type(""FormGroup""), ParentGroup);
	Else
		NewItem = Items.Insert(Name, Type(""FormGroup""), ParentGroup, ItemBefor);
	EndIf;
	
	NewItem.Type = FormGroupType.ButtonGroup; // ColumnGroup, CommandBar, ContextMenu, UsualGroup, Popup, Page, Pages
	NewItem.Group = ChildFormItemsGroup.Horizontal; // Vertical, HorizontalIfPossible, AlwaysHorizontal
	
	Return NewItem;
	
EndFunction
"}
},
{0,
{"Add item - form field",0,0,"","Function AddFieldOnForm(Items, Name, ParentGroup = Undefined, ItemBefor = Undefined, DataPath = """") Export
	
	If ItemBefor = Undefined Then
		NewItem = Items.Add(Name, Type(""FormField""), ParentGroup);
	Else
		NewItem = Items.Insert(Name, Type(""FormField""), ParentGroup, ItemBefor);
	EndIf;
	
	NewItem.Type = FormFieldType.InputField; // ProgressBarField, PictureField, LabelField, RadioButtonField, CheckBoxField
	NewItem.DataPath = DataPath;
	
	Return NewItem;
	
EndFunction
"}
},
{0,
{"Add item - form decoration",0,0,"","Function AddDecorationOnForm(Items, Name, ParentGroup = Undefined, ItemBefor = Undefined) Export
	
	If ItemBefor = Undefined Then
		NewItem = Items.Add(Name, Type(""FormDecoration""), ParentGroup);
	Else
		NewItem = Items.Insert(Name, Type(""FormDecoration""), ParentGroup, ItemBefor);
	EndIf;
	
	NewItem.Type = FormDecorationType.Label; // Picture
	
	Return NewItem;
	
EndFunction
"}
},
{0,
{"Add item - form table",0,0,"","Function AddDecorationOnForm(Items, Name, ParentGroup = Undefined, ItemBefor = Undefined, DataPath = """") Export
	
	If ItemBefor = Undefined Then
		NewItem = Items.Add(Name, Type(""FormTable""), ParentGroup);
	Else
		NewItem = Items.Insert(Name, Type(""FormTable""), ParentGroup, ItemBefor);
	EndIf;
	
	NewItem.DataPath = DataPath;
	
	Return NewItem;
	
EndFunction
"}
}
},
{0,
{"Data import from Excel Async",0,0,"","&AtClient
Async Procedure PutFileCommand(Command)
	
	DialogParameters = New PutFilesDialogParameters;
	DialogParameters.Title = ""BeginPutFileToServer"";
	DialogParameters.MultipleChoice = True;
	DialogParameters.Filter = NStr(""en = 'Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'; ru = 'Файл таблицы Excel (*.XLS, *.xlsx)|*.XLS;*.xlsx|'"");
	ProgressCallback = New CallbackDescription(""ProgressCallback"", ThisObject);
	BeforCallback = New CallbackDescription(""BeforCallback"", ThisObject);
	FilePuttingDescription = Await PutFileToServerAsync(ProgressCallback, BeforCallback, , DialogParameters);
	If FilePuttingDescription = Undefined Then
		Return;
	EndIf;
	
	Message(""File putting process "" + ?(FilePuttingDescription.FilePuttingCanceled, ""was canceled"", ""has done successfully""));
	Message(""Address in the temporary storage: "" + FilePuttingDescription.Address);
	Message(""File name: "" + FilePuttingDescription.FileRef.Name);
	Message(""File size (bites): "" + FilePuttingDescription.FileRef.Size());
	
	ProcessUploadedFile(FilePuttingDescription.Address);
	
EndProcedure

&AtServerNoContext
Procedure ProcessUploadedFile(Address)
	
	FileOnDisk = GetTempFileName(""xlsx"");
	FileData = GetFromTempStorage(Address);
	FileData.Write(FileOnDisk);
	
	TablDoc = New ТабличныйДокумент;
	TablDoc.Read(FileOnDisk, SpreadsheetDocumentValuesReadingMode.Value);
	
	QueryBuilder = New QueryBuilder;
	QueryBuilder.DataSource = New DataSourceDescription(TablDoc.InputArea(""List1"")); // List1 is name of Excel list
	QueryBuilder.Execute();
	// The first row of file have to contaned are columns names
	// Also important what are types of cells are there
	TSStrings = QueryBuilder.Result.Unload(); // Automaticly getting the table of values
	
	For Each TSString In TSStrings Do
		// Getting data
	EndDo;
	
EndProcedure

&AtClient
Procedure ProgressCallback(PuttingFile, HasPut, Cancel, AdditionalParameters) Export
	Message(""File "" + PuttingFile.Имя, HasPut, ""File size is "" + PuttingFile.Size() + "" bites"", PictureLib.Document);
EndProcedure

&AtClient
Procedure BeforCallback(PuttingFile, Cancel, AdditionalParameters) Export
	Message(""Putting file is "" + PuttingFile.Name + "", size is "" + PuttingFile.Size());
EndProcedure
"}
},
{0,
{"Open information register record form (option 1)",0,0,"","&AtClient
Procedure OpenRecordForm(RecordParameters)
	
	Dimensions = New Structure;
	<?"""", VariantChoice, ""Periodic"", ""Dimensions.Insert(\""Period\"", RecordParameters.Period);"", ""Non-periodic"", """">
	Dimensions.Insert(""Dimension1"", RecordParameters.Dimension1);

	KeyPerameters = New Array;
	KeyPerameters.Add(Dimensions);

	RecordKey = New(""InformationRegisterRecordKey.<?""Register kind"", MetadataObject, ""InformationRegister"">"", KeyPerameters);
	Filter = New Structure(""Key"", RecordKey);
	OpenForm(""InformationRegister.<?""Register kind"", MetadataObject, ""InformationRegister"">.RecordForm"", Filter);
	
EndProcedure
"}
},
{0,
{"Open information register record form (option 2)",0,0,"","&AtClient
Procedure OpenRecordForm(RecordParameters)
	
	Filter = New Structure(""Kew"", GetRecordKey(RecordParameters));
	OpenForm(""InformationRegister.<?""Register kind"", MetadataObject, ""InformationRegister"">.RecordForm"", Filter);
	
EndProcedure

&AtServer
Function GetRecordKey(RecordParameters)
	
	Dimensions = New Structure;
	<?"""", VariantChoice, ""Periodic"", ""Dimensions.Insert(\""Period\"", RecordParameters.Period);"", ""Non-periodic"", """">
	Dimensions.Insert(""Dimension1"", RecordParameters.Dimension1);
	
	Return InformationRegisters.<?""Register kind"", MetadataObject, ""InformationRegister"">.CreateRecordKey(Dimensions);
	
EndFunction
"}
}
},
{9,
{"HTTP services",1,0,"",""},
{0,
{"HTTP connection",0,0,"http=","ServerName = """";
PortNumber = 1;
UserName = """";
Password = """";

HTTPConnection = new HTTPConnection(ServerName, PortNumber, UserName, Password);"}
},
{0,
{"HTTP connection security Windows",0,0,"http=","ServerName = """";
PortNumber = 1;
UserName = """";
Password = """";
TimeOut = 5;

OpenSSL = new OpenSSLSecureConnection(
	new WindowsClientCertificate(), //WindowsCertificateSelectMode.Choose,
	new WindowsCertificationAuthorityCertificates());

HTTPConnection = new HTTPConnection(ServerName, PortNumber, UserName, Password, , TimeOut, OpenSSL);"}
},
{0,
{"HTTP request",0,0,"http=","DBName = ""?"";
ServiceName = ""?"";
Command = ""?"";
SourceAddress = StrTemplate(""%1/hs/%2/%3"", DBName, ServiceName, Command);

<?""Using parameters"", VariantChoice, ""With parameters"", ""AddParametersToSourceAddress(SourceAddress, TitleParameters);"", ""Without parameters"", """">

HTTPRequest  = New HTTPRequest(SourceAddress);
HTTPRequest.Headers.Insert(""Content-Type"", ""application/json; charset=utf-8"");
//HTTPRequest.SetBodyFromString(""?"", ""UTF-8"", ByteOrderMarkUse.DontUse); // for PUT or POST

HTTPResponse = HTTPConnection.<?""Method"", VariantChoice, ""GET"", ""Get"", ""PUT"", ""Put"", ""POST"", ""Post"", ""DELETE"", ""Delete"">(HTTPRequest);"}
},
{0,
{"HTTP response",0,0,"http=","If HTTPResponse.StatusCode >= 200 And HTTPResponse.StatusCode < 300 Then // successfully
	Response = HTTPResponse.GetBodyAsString(""UTF-8"");
EndIf;"}
},
{0,
{"Add parameters to source address",0,0,"","Procedure AddParametersToSourceAddress(RequestString, ParametersStructure)
	
	If TypeOf(ParametersStructure) = Type(""Structure"") And ParametersStructure.Count() > 0 Then
		RequestString = RequestString + ""?"";
	Else
		Return;
	EndIf;
	
	IsFirst = True;
	
	For Each KeyAndValue In ParametersStructure Do
		
		name = Lower(KeyAndValue.Key);
		value = KeyAndValue.Value;
		
		If TypeOf(value) = Type(""Date"") Then
			value = Format(value, ""DF=""""yyyyMMddHHMMss"""""");
		ElsIf TypeOf(value) = Type(""Number"") Then
			value = String(value);
			value = StrReplace(value, Chars.NBSp, """");
		ElsIf TypeOf(value) = Type(""Boolean"") Then
			value = ?(value, ""true"", ""false"");
		EndIf;
		
		RequestString = RequestString + ?(IsFirst, """", ""&"") + Lower(name) + ""="" + value;
		IsFirst = False;
		
	EndDo;
	
EndProcedure
"}
},
{0,
{"HTTP incoming request - URL parameter",0,0,"http=","<?""Parameter name""> = IncomingRequest.URLParameters[""<?>""];"}
},
{0,
{"HTTP incoming request - request's parameter",0,0,"http=","<?""Parameter name""> = IncomingRequest.QueryOptions.Get(""<?>"");"}
},
{0,
{"HTTP incoming request - request's parameters selecting",0,0,"http=","For Each KeyAndValue In IncomingRequest.QueryOptions Do
	
	name = KeyAndValue.Key;
	value = KeyAndValue.Value;
	<?>
	
EndDo;"}
},
{0,
{"HTTP incoming request - parameters from request body",0,0,"http=","<?""Parameter name""> = IncomingRequest.GetBodyAsString(TextEncoding.UTF8);"}
}
}
}
}
}